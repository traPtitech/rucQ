// Code generated by MockGen. DO NOT EDIT.
// Source: traq.go
//
// Generated by this command:
//
//	mockgen -source=traq.go -destination=mocktraq/traq.go -package=mocktraq
//

// Package mocktraq is a generated GoMock package.
package mocktraq

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTraqService is a mock of TraqService interface.
type MockTraqService struct {
	ctrl     *gomock.Controller
	recorder *MockTraqServiceMockRecorder
	isgomock struct{}
}

// MockTraqServiceMockRecorder is the mock recorder for MockTraqService.
type MockTraqServiceMockRecorder struct {
	mock *MockTraqService
}

// NewMockTraqService creates a new mock instance.
func NewMockTraqService(ctrl *gomock.Controller) *MockTraqService {
	mock := &MockTraqService{ctrl: ctrl}
	mock.recorder = &MockTraqServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTraqService) EXPECT() *MockTraqServiceMockRecorder {
	return m.recorder
}

// GetCanonicalUserName mocks base method.
func (m *MockTraqService) GetCanonicalUserName(ctx context.Context, userID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCanonicalUserName", ctx, userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCanonicalUserName indicates an expected call of GetCanonicalUserName.
func (mr *MockTraqServiceMockRecorder) GetCanonicalUserName(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCanonicalUserName", reflect.TypeOf((*MockTraqService)(nil).GetCanonicalUserName), ctx, userID)
}

// PostDirectMessage mocks base method.
func (m *MockTraqService) PostDirectMessage(ctx context.Context, userID, content string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostDirectMessage", ctx, userID, content)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostDirectMessage indicates an expected call of PostDirectMessage.
func (mr *MockTraqServiceMockRecorder) PostDirectMessage(ctx, userID, content any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostDirectMessage", reflect.TypeOf((*MockTraqService)(nil).PostDirectMessage), ctx, userID, content)
}
