// Package router provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package router

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for DurationEventDisplayColor.
const (
	Blue   DurationEventDisplayColor = "blue"
	Green  DurationEventDisplayColor = "green"
	Orange DurationEventDisplayColor = "orange"
	Pink   DurationEventDisplayColor = "pink"
	Purple DurationEventDisplayColor = "purple"
	Red    DurationEventDisplayColor = "red"
)

// Defines values for DurationEventType.
const (
	Duration DurationEventType = "duration"
)

// Defines values for FreeNumberQuestionType.
const (
	FreeNumber FreeNumberQuestionType = "free_number"
)

// Defines values for FreeTextQuestionType.
const (
	FreeText FreeTextQuestionType = "free_text"
)

// Defines values for MomentEventType.
const (
	Moment MomentEventType = "moment"
)

// Defines values for MultipleChoiceQuestionType.
const (
	Multiple MultipleChoiceQuestionType = "multiple"
)

// Defines values for OfficialEventType.
const (
	Official OfficialEventType = "official"
)

// Defines values for SingleChoiceQuestionType.
const (
	Single SingleChoiceQuestionType = "single"
)

// Answer defines model for Answer.
type Answer struct {
	union json.RawMessage
}

// Camp defines model for Camp.
type Camp struct {
	Description        string `json:"description"`
	DisplayId          string `json:"displayId"`
	Id                 *int   `json:"id,omitempty"`
	IsDraft            bool   `json:"isDraft"`
	IsPaymentOpen      bool   `json:"isPaymentOpen"`
	IsRegistrationOpen bool   `json:"isRegistrationOpen"`
	Name               string `json:"name"`
}

// Dashboard defines model for Dashboard.
type Dashboard struct {
	Id      *string `json:"id,omitempty"`
	Payment Payment `json:"payment"`
	Room    Room    `json:"room"`
}

// DurationEvent defines model for DurationEvent.
type DurationEvent struct {
	Description  string                    `json:"description"`
	DisplayColor DurationEventDisplayColor `json:"displayColor"`
	Id           *int                      `json:"id,omitempty"`
	Location     string                    `json:"location"`
	Name         string                    `json:"name"`
	OrganizerId  string                    `json:"organizerId"`
	TimeEnd      time.Time                 `json:"timeEnd"`
	TimeStart    time.Time                 `json:"timeStart"`
	Type         DurationEventType         `json:"type"`
}

// DurationEventDisplayColor defines model for DurationEvent.DisplayColor.
type DurationEventDisplayColor string

// DurationEventType defines model for DurationEvent.Type.
type DurationEventType string

// Event defines model for Event.
type Event struct {
	union json.RawMessage
}

// FreeNumberAnswer defines model for FreeNumberAnswer.
type FreeNumberAnswer struct {
	Content    float32 `json:"content"`
	Id         *int    `json:"id,omitempty"`
	QuestionId *int    `json:"questionId,omitempty"`
	UserId     *string `json:"userId,omitempty"`
}

// FreeNumberQuestion defines model for FreeNumberQuestion.
type FreeNumberQuestion struct {
	Description     *string                `json:"description"`
	Id              *int                   `json:"id,omitempty"`
	IsOpen          bool                   `json:"isOpen"`
	IsPublic        bool                   `json:"isPublic"`
	QuestionGroupId int                    `json:"questionGroupId"`
	Title           string                 `json:"title"`
	Type            FreeNumberQuestionType `json:"type"`
}

// FreeNumberQuestionType defines model for FreeNumberQuestion.Type.
type FreeNumberQuestionType string

// FreeTextAnswer defines model for FreeTextAnswer.
type FreeTextAnswer struct {
	Content    string  `json:"content"`
	Id         *int    `json:"id,omitempty"`
	QuestionId *int    `json:"questionId,omitempty"`
	UserId     *string `json:"userId,omitempty"`
}

// FreeTextQuestion defines model for FreeTextQuestion.
type FreeTextQuestion struct {
	Description     *string              `json:"description"`
	Id              *int                 `json:"id,omitempty"`
	IsOpen          bool                 `json:"isOpen"`
	IsPublic        bool                 `json:"isPublic"`
	QuestionGroupId int                  `json:"questionGroupId"`
	Title           string               `json:"title"`
	Type            FreeTextQuestionType `json:"type"`
}

// FreeTextQuestionType defines model for FreeTextQuestion.Type.
type FreeTextQuestionType string

// Image defines model for Image.
type Image struct {
	Id *int `json:"id,omitempty"`
}

// Message defines model for Message.
type Message struct {
	Content string    `json:"content"`
	SendAt  time.Time `json:"sendAt"`
}

// MomentEvent defines model for MomentEvent.
type MomentEvent struct {
	Description string          `json:"description"`
	Id          *int            `json:"id,omitempty"`
	Location    string          `json:"location"`
	Name        string          `json:"name"`
	Time        time.Time       `json:"time"`
	Type        MomentEventType `json:"type"`
}

// MomentEventType defines model for MomentEvent.Type.
type MomentEventType string

// MultipleChoiceAnswer defines model for MultipleChoiceAnswer.
type MultipleChoiceAnswer struct {
	Content    []Option `json:"content"`
	Id         *int     `json:"id,omitempty"`
	QuestionId *int     `json:"questionId,omitempty"`
	UserId     *string  `json:"userId,omitempty"`
}

// MultipleChoiceQuestion defines model for MultipleChoiceQuestion.
type MultipleChoiceQuestion struct {
	Description     *string                    `json:"description"`
	Id              *int                       `json:"id,omitempty"`
	IsOpen          bool                       `json:"isOpen"`
	IsPublic        bool                       `json:"isPublic"`
	Options         *[]Option                  `json:"options,omitempty"`
	QuestionGroupId int                        `json:"questionGroupId"`
	Title           string                     `json:"title"`
	Type            MultipleChoiceQuestionType `json:"type"`
}

// MultipleChoiceQuestionType defines model for MultipleChoiceQuestion.Type.
type MultipleChoiceQuestionType string

// OfficialEvent defines model for OfficialEvent.
type OfficialEvent struct {
	Description string            `json:"description"`
	Id          *int              `json:"id,omitempty"`
	Location    string            `json:"location"`
	Name        string            `json:"name"`
	TimeEnd     time.Time         `json:"timeEnd"`
	TimeStart   time.Time         `json:"timeStart"`
	Type        OfficialEventType `json:"type"`
}

// OfficialEventType defines model for OfficialEvent.Type.
type OfficialEventType string

// Option defines model for Option.
type Option struct {
	Content    string `json:"content"`
	Id         *int   `json:"id,omitempty"`
	QuestionId int    `json:"questionId"`
}

// Payment defines model for Payment.
type Payment struct {
	Amount     int     `json:"amount"`
	AmountPaid int     `json:"amountPaid"`
	CampId     int     `json:"campId"`
	Id         *int    `json:"id,omitempty"`
	UserId     *string `json:"userId,omitempty"`
}

// PostRoomRequest defines model for PostRoomRequest.
type PostRoomRequest struct {
	MemberIds   []string `json:"memberIds"`
	Name        string   `json:"name"`
	RoomGroupId int      `json:"roomGroupId"`
}

// Question defines model for Question.
type Question struct {
	union json.RawMessage
}

// QuestionGroup defines model for QuestionGroup.
type QuestionGroup struct {
	Description *string     `json:"description"`
	Due         time.Time   `json:"due"`
	Id          *int        `json:"id,omitempty"`
	Name        string      `json:"name"`
	Questions   *[]Question `json:"questions,omitempty"`
}

// RollCall defines model for RollCall.
type RollCall struct {
	Description string   `json:"description"`
	Id          *int     `json:"id,omitempty"`
	Name        string   `json:"name"`
	Options     []string `json:"options"`
	Subjects    []string `json:"subjects"`
}

// RollCallReaction defines model for RollCallReaction.
type RollCallReaction struct {
	Content string  `json:"content"`
	Id      *int    `json:"id,omitempty"`
	UserId  *string `json:"userId,omitempty"`
}

// Room defines model for Room.
type Room struct {
	Id      int    `json:"id"`
	Members []User `json:"members"`
	Name    string `json:"name"`
}

// RoomGroup defines model for RoomGroup.
type RoomGroup struct {
	Id    *int    `json:"id,omitempty"`
	Name  string  `json:"name"`
	Rooms *[]Room `json:"rooms,omitempty"`
}

// SingleChoiceAnswer defines model for SingleChoiceAnswer.
type SingleChoiceAnswer struct {
	Content    Option  `json:"content"`
	Id         *int    `json:"id,omitempty"`
	QuestionId *int    `json:"questionId,omitempty"`
	UserId     *string `json:"userId,omitempty"`
}

// SingleChoiceQuestion defines model for SingleChoiceQuestion.
type SingleChoiceQuestion struct {
	Description     *string                  `json:"description"`
	Id              *int                     `json:"id,omitempty"`
	IsOpen          bool                     `json:"isOpen"`
	IsPublic        bool                     `json:"isPublic"`
	Options         *[]Option                `json:"options,omitempty"`
	QuestionGroupId int                      `json:"questionGroupId"`
	Title           string                   `json:"title"`
	Type            SingleChoiceQuestionType `json:"type"`
}

// SingleChoiceQuestionType defines model for SingleChoiceQuestion.Type.
type SingleChoiceQuestionType string

// User defines model for User.
type User struct {
	Id      *string `json:"id,omitempty"`
	IsStaff *bool   `json:"isStaff,omitempty"`
}

// AnswerId defines model for AnswerId.
type AnswerId = int

// CampId defines model for CampId.
type CampId = int

// EventId defines model for EventId.
type EventId = int

// ImageId defines model for ImageId.
type ImageId = int

// OptionId defines model for OptionId.
type OptionId = int

// PaymentId defines model for PaymentId.
type PaymentId = int

// QuestionGroupId defines model for QuestionGroupId.
type QuestionGroupId = int

// QuestionId defines model for QuestionId.
type QuestionId = int

// ReactionId defines model for ReactionId.
type ReactionId = int

// RollCallId defines model for RollCallId.
type RollCallId = int

// RoomGroupId defines model for RoomGroupId.
type RoomGroupId = int

// RoomId defines model for RoomId.
type RoomId = int

// UserId defines model for UserId.
type UserId = string

// UserIdInQuery defines model for UserIdInQuery.
type UserIdInQuery = string

// XForwardedUser defines model for X-Forwarded-User.
type XForwardedUser = string

// BadRequest defines model for BadRequest.
type BadRequest struct {
	Message *string `json:"message,omitempty"`
}

// Conflict defines model for Conflict.
type Conflict struct {
	Message *string `json:"message,omitempty"`
}

// Forbidden defines model for Forbidden.
type Forbidden struct {
	Message *string `json:"message,omitempty"`
}

// InternalServerError defines model for InternalServerError.
type InternalServerError struct {
	Message *string `json:"message,omitempty"`
}

// NotFound defines model for NotFound.
type NotFound struct {
	Message *string `json:"message,omitempty"`
}

// AdminPutAnswerParams defines parameters for AdminPutAnswer.
type AdminPutAnswerParams struct {
	// XForwardedUser ログインしているユーザーのtraQ ID（NeoShowcaseが自動で付与）
	XForwardedUser *XForwardedUser `json:"X-Forwarded-User,omitempty"`
}

// AdminPostCampParams defines parameters for AdminPostCamp.
type AdminPostCampParams struct {
	// XForwardedUser ログインしているユーザーのtraQ ID（NeoShowcaseが自動で付与）
	XForwardedUser *XForwardedUser `json:"X-Forwarded-User,omitempty"`
}

// AdminDeleteCampParams defines parameters for AdminDeleteCamp.
type AdminDeleteCampParams struct {
	// XForwardedUser ログインしているユーザーのtraQ ID（NeoShowcaseが自動で付与）
	XForwardedUser *XForwardedUser `json:"X-Forwarded-User,omitempty"`
}

// AdminPutCampParams defines parameters for AdminPutCamp.
type AdminPutCampParams struct {
	// XForwardedUser ログインしているユーザーのtraQ ID（NeoShowcaseが自動で付与）
	XForwardedUser *XForwardedUser `json:"X-Forwarded-User,omitempty"`
}

// AdminPostImageMultipartBody defines parameters for AdminPostImage.
type AdminPostImageMultipartBody struct {
	File *[]openapi_types.File `json:"file,omitempty"`
}

// AdminPostImageParams defines parameters for AdminPostImage.
type AdminPostImageParams struct {
	// XForwardedUser ログインしているユーザーのtraQ ID（NeoShowcaseが自動で付与）
	XForwardedUser *XForwardedUser `json:"X-Forwarded-User,omitempty"`
}

// AdminGetPaymentsParams defines parameters for AdminGetPayments.
type AdminGetPaymentsParams struct {
	// XForwardedUser ログインしているユーザーのtraQ ID（NeoShowcaseが自動で付与）
	XForwardedUser *XForwardedUser `json:"X-Forwarded-User,omitempty"`
}

// AdminPostPaymentParams defines parameters for AdminPostPayment.
type AdminPostPaymentParams struct {
	// XForwardedUser ログインしているユーザーのtraQ ID（NeoShowcaseが自動で付与）
	XForwardedUser *XForwardedUser `json:"X-Forwarded-User,omitempty"`
}

// AdminPostQuestionGroupParams defines parameters for AdminPostQuestionGroup.
type AdminPostQuestionGroupParams struct {
	// XForwardedUser ログインしているユーザーのtraQ ID（NeoShowcaseが自動で付与）
	XForwardedUser *XForwardedUser `json:"X-Forwarded-User,omitempty"`
}

// AdminPostRollCallParams defines parameters for AdminPostRollCall.
type AdminPostRollCallParams struct {
	// XForwardedUser ログインしているユーザーのtraQ ID（NeoShowcaseが自動で付与）
	XForwardedUser *XForwardedUser `json:"X-Forwarded-User,omitempty"`
}

// AdminPostRoomGroupParams defines parameters for AdminPostRoomGroup.
type AdminPostRoomGroupParams struct {
	// XForwardedUser ログインしているユーザーのtraQ ID（NeoShowcaseが自動で付与）
	XForwardedUser *XForwardedUser `json:"X-Forwarded-User,omitempty"`
}

// AdminDeleteImageParams defines parameters for AdminDeleteImage.
type AdminDeleteImageParams struct {
	// XForwardedUser ログインしているユーザーのtraQ ID（NeoShowcaseが自動で付与）
	XForwardedUser *XForwardedUser `json:"X-Forwarded-User,omitempty"`
}

// AdminPutImageMultipartBody defines parameters for AdminPutImage.
type AdminPutImageMultipartBody struct {
	File *openapi_types.File `json:"file,omitempty"`
}

// AdminPutImageParams defines parameters for AdminPutImage.
type AdminPutImageParams struct {
	// XForwardedUser ログインしているユーザーのtraQ ID（NeoShowcaseが自動で付与）
	XForwardedUser *XForwardedUser `json:"X-Forwarded-User,omitempty"`
}

// AdminPostOptionParams defines parameters for AdminPostOption.
type AdminPostOptionParams struct {
	// XForwardedUser ログインしているユーザーのtraQ ID（NeoShowcaseが自動で付与）
	XForwardedUser *XForwardedUser `json:"X-Forwarded-User,omitempty"`
}

// AdminDeleteOptionParams defines parameters for AdminDeleteOption.
type AdminDeleteOptionParams struct {
	// XForwardedUser ログインしているユーザーのtraQ ID（NeoShowcaseが自動で付与）
	XForwardedUser *XForwardedUser `json:"X-Forwarded-User,omitempty"`
}

// AdminPutOptionParams defines parameters for AdminPutOption.
type AdminPutOptionParams struct {
	// XForwardedUser ログインしているユーザーのtraQ ID（NeoShowcaseが自動で付与）
	XForwardedUser *XForwardedUser `json:"X-Forwarded-User,omitempty"`
}

// AdminPutPaymentParams defines parameters for AdminPutPayment.
type AdminPutPaymentParams struct {
	// XForwardedUser ログインしているユーザーのtraQ ID（NeoShowcaseが自動で付与）
	XForwardedUser *XForwardedUser `json:"X-Forwarded-User,omitempty"`
}

// AdminDeleteQuestionGroupParams defines parameters for AdminDeleteQuestionGroup.
type AdminDeleteQuestionGroupParams struct {
	// XForwardedUser ログインしているユーザーのtraQ ID（NeoShowcaseが自動で付与）
	XForwardedUser *XForwardedUser `json:"X-Forwarded-User,omitempty"`
}

// AdminPutQuestionGroupParams defines parameters for AdminPutQuestionGroup.
type AdminPutQuestionGroupParams struct {
	// XForwardedUser ログインしているユーザーのtraQ ID（NeoShowcaseが自動で付与）
	XForwardedUser *XForwardedUser `json:"X-Forwarded-User,omitempty"`
}

// AdminPostQuestionParams defines parameters for AdminPostQuestion.
type AdminPostQuestionParams struct {
	// XForwardedUser ログインしているユーザーのtraQ ID（NeoShowcaseが自動で付与）
	XForwardedUser *XForwardedUser `json:"X-Forwarded-User,omitempty"`
}

// AdminDeleteQuestionParams defines parameters for AdminDeleteQuestion.
type AdminDeleteQuestionParams struct {
	// XForwardedUser ログインしているユーザーのtraQ ID（NeoShowcaseが自動で付与）
	XForwardedUser *XForwardedUser `json:"X-Forwarded-User,omitempty"`
}

// AdminPutQuestionParams defines parameters for AdminPutQuestion.
type AdminPutQuestionParams struct {
	// XForwardedUser ログインしているユーザーのtraQ ID（NeoShowcaseが自動で付与）
	XForwardedUser *XForwardedUser `json:"X-Forwarded-User,omitempty"`
}

// AdminGetAnswersParams defines parameters for AdminGetAnswers.
type AdminGetAnswersParams struct {
	// UserId User ID
	UserId *UserIdInQuery `form:"userId,omitempty" json:"userId,omitempty"`

	// XForwardedUser ログインしているユーザーのtraQ ID（NeoShowcaseが自動で付与）
	XForwardedUser *XForwardedUser `json:"X-Forwarded-User,omitempty"`
}

// AdminDeleteRoomGroupParams defines parameters for AdminDeleteRoomGroup.
type AdminDeleteRoomGroupParams struct {
	// XForwardedUser ログインしているユーザーのtraQ ID（NeoShowcaseが自動で付与）
	XForwardedUser *XForwardedUser `json:"X-Forwarded-User,omitempty"`
}

// AdminPutRoomGroupParams defines parameters for AdminPutRoomGroup.
type AdminPutRoomGroupParams struct {
	// XForwardedUser ログインしているユーザーのtraQ ID（NeoShowcaseが自動で付与）
	XForwardedUser *XForwardedUser `json:"X-Forwarded-User,omitempty"`
}

// AdminPostRoomParams defines parameters for AdminPostRoom.
type AdminPostRoomParams struct {
	// XForwardedUser ログインしているユーザーのtraQ ID（NeoShowcaseが自動で付与）
	XForwardedUser *XForwardedUser `json:"X-Forwarded-User,omitempty"`
}

// AdminDeleteRoomParams defines parameters for AdminDeleteRoom.
type AdminDeleteRoomParams struct {
	// XForwardedUser ログインしているユーザーのtraQ ID（NeoShowcaseが自動で付与）
	XForwardedUser *XForwardedUser `json:"X-Forwarded-User,omitempty"`
}

// AdminPutRoomParams defines parameters for AdminPutRoom.
type AdminPutRoomParams struct {
	// XForwardedUser ログインしているユーザーのtraQ ID（NeoShowcaseが自動で付与）
	XForwardedUser *XForwardedUser `json:"X-Forwarded-User,omitempty"`
}

// AdminGetUserParams defines parameters for AdminGetUser.
type AdminGetUserParams struct {
	// XForwardedUser ログインしているユーザーのtraQ ID（NeoShowcaseが自動で付与）
	XForwardedUser *XForwardedUser `json:"X-Forwarded-User,omitempty"`
}

// AdminPutUserParams defines parameters for AdminPutUser.
type AdminPutUserParams struct {
	// XForwardedUser ログインしているユーザーのtraQ ID（NeoShowcaseが自動で付与）
	XForwardedUser *XForwardedUser `json:"X-Forwarded-User,omitempty"`
}

// AdminPostMessageParams defines parameters for AdminPostMessage.
type AdminPostMessageParams struct {
	// XForwardedUser ログインしているユーザーのtraQ ID（NeoShowcaseが自動で付与）
	XForwardedUser *XForwardedUser `json:"X-Forwarded-User,omitempty"`
}

// PostAnswerParams defines parameters for PostAnswer.
type PostAnswerParams struct {
	// XForwardedUser ログインしているユーザーのtraQ ID（NeoShowcaseが自動で付与）
	XForwardedUser *XForwardedUser `json:"X-Forwarded-User,omitempty"`
}

// PutAnswerParams defines parameters for PutAnswer.
type PutAnswerParams struct {
	// XForwardedUser ログインしているユーザーのtraQ ID（NeoShowcaseが自動で付与）
	XForwardedUser *XForwardedUser `json:"X-Forwarded-User,omitempty"`
}

// PostEventParams defines parameters for PostEvent.
type PostEventParams struct {
	// XForwardedUser ログインしているユーザーのtraQ ID（NeoShowcaseが自動で付与）
	XForwardedUser *XForwardedUser `json:"X-Forwarded-User,omitempty"`
}

// GetMyCampParams defines parameters for GetMyCamp.
type GetMyCampParams struct {
	// XForwardedUser ログインしているユーザーのtraQ ID（NeoShowcaseが自動で付与）
	XForwardedUser *XForwardedUser `json:"X-Forwarded-User,omitempty"`
}

// DeleteCampRegisterParams defines parameters for DeleteCampRegister.
type DeleteCampRegisterParams struct {
	// XForwardedUser ログインしているユーザーのtraQ ID（NeoShowcaseが自動で付与）
	XForwardedUser *XForwardedUser `json:"X-Forwarded-User,omitempty"`
}

// PostCampRegisterParams defines parameters for PostCampRegister.
type PostCampRegisterParams struct {
	// XForwardedUser ログインしているユーザーのtraQ ID（NeoShowcaseが自動で付与）
	XForwardedUser *XForwardedUser `json:"X-Forwarded-User,omitempty"`
}

// DeleteEventParams defines parameters for DeleteEvent.
type DeleteEventParams struct {
	// XForwardedUser ログインしているユーザーのtraQ ID（NeoShowcaseが自動で付与）
	XForwardedUser *XForwardedUser `json:"X-Forwarded-User,omitempty"`
}

// PutEventParams defines parameters for PutEvent.
type PutEventParams struct {
	// XForwardedUser ログインしているユーザーのtraQ ID（NeoShowcaseが自動で付与）
	XForwardedUser *XForwardedUser `json:"X-Forwarded-User,omitempty"`
}

// GetMeParams defines parameters for GetMe.
type GetMeParams struct {
	// XForwardedUser ログインしているユーザーのtraQ ID（NeoShowcaseが自動で付与）
	XForwardedUser *XForwardedUser `json:"X-Forwarded-User,omitempty"`
}

// GetMyAnswersParams defines parameters for GetMyAnswers.
type GetMyAnswersParams struct {
	// XForwardedUser ログインしているユーザーのtraQ ID（NeoShowcaseが自動で付与）
	XForwardedUser *XForwardedUser `json:"X-Forwarded-User,omitempty"`
}

// DeleteReactionParams defines parameters for DeleteReaction.
type DeleteReactionParams struct {
	// XForwardedUser ログインしているユーザーのtraQ ID（NeoShowcaseが自動で付与）
	XForwardedUser *XForwardedUser `json:"X-Forwarded-User,omitempty"`
}

// PutReactionParams defines parameters for PutReaction.
type PutReactionParams struct {
	// XForwardedUser ログインしているユーザーのtraQ ID（NeoShowcaseが自動で付与）
	XForwardedUser *XForwardedUser `json:"X-Forwarded-User,omitempty"`
}

// PostRollCallReactionParams defines parameters for PostRollCallReaction.
type PostRollCallReactionParams struct {
	// XForwardedUser ログインしているユーザーのtraQ ID（NeoShowcaseが自動で付与）
	XForwardedUser *XForwardedUser `json:"X-Forwarded-User,omitempty"`
}

// AdminPutAnswerJSONRequestBody defines body for AdminPutAnswer for application/json ContentType.
type AdminPutAnswerJSONRequestBody = Answer

// AdminPostCampJSONRequestBody defines body for AdminPostCamp for application/json ContentType.
type AdminPostCampJSONRequestBody = Camp

// AdminPutCampJSONRequestBody defines body for AdminPutCamp for application/json ContentType.
type AdminPutCampJSONRequestBody = Camp

// AdminPostImageMultipartRequestBody defines body for AdminPostImage for multipart/form-data ContentType.
type AdminPostImageMultipartRequestBody AdminPostImageMultipartBody

// AdminPostPaymentJSONRequestBody defines body for AdminPostPayment for application/json ContentType.
type AdminPostPaymentJSONRequestBody = Payment

// AdminPostQuestionGroupJSONRequestBody defines body for AdminPostQuestionGroup for application/json ContentType.
type AdminPostQuestionGroupJSONRequestBody = QuestionGroup

// AdminPostRollCallJSONRequestBody defines body for AdminPostRollCall for application/json ContentType.
type AdminPostRollCallJSONRequestBody = RollCall

// AdminPostRoomGroupJSONRequestBody defines body for AdminPostRoomGroup for application/json ContentType.
type AdminPostRoomGroupJSONRequestBody = RoomGroup

// AdminPutImageMultipartRequestBody defines body for AdminPutImage for multipart/form-data ContentType.
type AdminPutImageMultipartRequestBody AdminPutImageMultipartBody

// AdminPostOptionJSONRequestBody defines body for AdminPostOption for application/json ContentType.
type AdminPostOptionJSONRequestBody = Option

// AdminPutOptionJSONRequestBody defines body for AdminPutOption for application/json ContentType.
type AdminPutOptionJSONRequestBody = Option

// AdminPutPaymentJSONRequestBody defines body for AdminPutPayment for application/json ContentType.
type AdminPutPaymentJSONRequestBody = Payment

// AdminPutQuestionGroupJSONRequestBody defines body for AdminPutQuestionGroup for application/json ContentType.
type AdminPutQuestionGroupJSONRequestBody = QuestionGroup

// AdminPostQuestionJSONRequestBody defines body for AdminPostQuestion for application/json ContentType.
type AdminPostQuestionJSONRequestBody = Question

// AdminPutQuestionJSONRequestBody defines body for AdminPutQuestion for application/json ContentType.
type AdminPutQuestionJSONRequestBody = Question

// AdminPutRoomGroupJSONRequestBody defines body for AdminPutRoomGroup for application/json ContentType.
type AdminPutRoomGroupJSONRequestBody = RoomGroup

// AdminPostRoomJSONRequestBody defines body for AdminPostRoom for application/json ContentType.
type AdminPostRoomJSONRequestBody = PostRoomRequest

// AdminPutRoomJSONRequestBody defines body for AdminPutRoom for application/json ContentType.
type AdminPutRoomJSONRequestBody = PostRoomRequest

// AdminPutUserJSONRequestBody defines body for AdminPutUser for application/json ContentType.
type AdminPutUserJSONRequestBody = User

// AdminPostMessageJSONRequestBody defines body for AdminPostMessage for application/json ContentType.
type AdminPostMessageJSONRequestBody = Message

// PostAnswerJSONRequestBody defines body for PostAnswer for application/json ContentType.
type PostAnswerJSONRequestBody = Answer

// PutAnswerJSONRequestBody defines body for PutAnswer for application/json ContentType.
type PutAnswerJSONRequestBody = Answer

// PostEventJSONRequestBody defines body for PostEvent for application/json ContentType.
type PostEventJSONRequestBody = Event

// PutEventJSONRequestBody defines body for PutEvent for application/json ContentType.
type PutEventJSONRequestBody = Event

// PutReactionJSONRequestBody defines body for PutReaction for application/json ContentType.
type PutReactionJSONRequestBody = RollCallReaction

// PostRollCallReactionJSONRequestBody defines body for PostRollCallReaction for application/json ContentType.
type PostRollCallReactionJSONRequestBody = RollCallReaction

// AsFreeTextAnswer returns the union data inside the Answer as a FreeTextAnswer
func (t Answer) AsFreeTextAnswer() (FreeTextAnswer, error) {
	var body FreeTextAnswer
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFreeTextAnswer overwrites any union data inside the Answer as the provided FreeTextAnswer
func (t *Answer) FromFreeTextAnswer(v FreeTextAnswer) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFreeTextAnswer performs a merge with any union data inside the Answer, using the provided FreeTextAnswer
func (t *Answer) MergeFreeTextAnswer(v FreeTextAnswer) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsFreeNumberAnswer returns the union data inside the Answer as a FreeNumberAnswer
func (t Answer) AsFreeNumberAnswer() (FreeNumberAnswer, error) {
	var body FreeNumberAnswer
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFreeNumberAnswer overwrites any union data inside the Answer as the provided FreeNumberAnswer
func (t *Answer) FromFreeNumberAnswer(v FreeNumberAnswer) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFreeNumberAnswer performs a merge with any union data inside the Answer, using the provided FreeNumberAnswer
func (t *Answer) MergeFreeNumberAnswer(v FreeNumberAnswer) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSingleChoiceAnswer returns the union data inside the Answer as a SingleChoiceAnswer
func (t Answer) AsSingleChoiceAnswer() (SingleChoiceAnswer, error) {
	var body SingleChoiceAnswer
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSingleChoiceAnswer overwrites any union data inside the Answer as the provided SingleChoiceAnswer
func (t *Answer) FromSingleChoiceAnswer(v SingleChoiceAnswer) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSingleChoiceAnswer performs a merge with any union data inside the Answer, using the provided SingleChoiceAnswer
func (t *Answer) MergeSingleChoiceAnswer(v SingleChoiceAnswer) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMultipleChoiceAnswer returns the union data inside the Answer as a MultipleChoiceAnswer
func (t Answer) AsMultipleChoiceAnswer() (MultipleChoiceAnswer, error) {
	var body MultipleChoiceAnswer
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMultipleChoiceAnswer overwrites any union data inside the Answer as the provided MultipleChoiceAnswer
func (t *Answer) FromMultipleChoiceAnswer(v MultipleChoiceAnswer) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMultipleChoiceAnswer performs a merge with any union data inside the Answer, using the provided MultipleChoiceAnswer
func (t *Answer) MergeMultipleChoiceAnswer(v MultipleChoiceAnswer) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Answer) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Answer) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDurationEvent returns the union data inside the Event as a DurationEvent
func (t Event) AsDurationEvent() (DurationEvent, error) {
	var body DurationEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDurationEvent overwrites any union data inside the Event as the provided DurationEvent
func (t *Event) FromDurationEvent(v DurationEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDurationEvent performs a merge with any union data inside the Event, using the provided DurationEvent
func (t *Event) MergeDurationEvent(v DurationEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsOfficialEvent returns the union data inside the Event as a OfficialEvent
func (t Event) AsOfficialEvent() (OfficialEvent, error) {
	var body OfficialEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromOfficialEvent overwrites any union data inside the Event as the provided OfficialEvent
func (t *Event) FromOfficialEvent(v OfficialEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeOfficialEvent performs a merge with any union data inside the Event, using the provided OfficialEvent
func (t *Event) MergeOfficialEvent(v OfficialEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMomentEvent returns the union data inside the Event as a MomentEvent
func (t Event) AsMomentEvent() (MomentEvent, error) {
	var body MomentEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMomentEvent overwrites any union data inside the Event as the provided MomentEvent
func (t *Event) FromMomentEvent(v MomentEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMomentEvent performs a merge with any union data inside the Event, using the provided MomentEvent
func (t *Event) MergeMomentEvent(v MomentEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Event) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Event) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsFreeTextQuestion returns the union data inside the Question as a FreeTextQuestion
func (t Question) AsFreeTextQuestion() (FreeTextQuestion, error) {
	var body FreeTextQuestion
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFreeTextQuestion overwrites any union data inside the Question as the provided FreeTextQuestion
func (t *Question) FromFreeTextQuestion(v FreeTextQuestion) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFreeTextQuestion performs a merge with any union data inside the Question, using the provided FreeTextQuestion
func (t *Question) MergeFreeTextQuestion(v FreeTextQuestion) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsFreeNumberQuestion returns the union data inside the Question as a FreeNumberQuestion
func (t Question) AsFreeNumberQuestion() (FreeNumberQuestion, error) {
	var body FreeNumberQuestion
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFreeNumberQuestion overwrites any union data inside the Question as the provided FreeNumberQuestion
func (t *Question) FromFreeNumberQuestion(v FreeNumberQuestion) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFreeNumberQuestion performs a merge with any union data inside the Question, using the provided FreeNumberQuestion
func (t *Question) MergeFreeNumberQuestion(v FreeNumberQuestion) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSingleChoiceQuestion returns the union data inside the Question as a SingleChoiceQuestion
func (t Question) AsSingleChoiceQuestion() (SingleChoiceQuestion, error) {
	var body SingleChoiceQuestion
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSingleChoiceQuestion overwrites any union data inside the Question as the provided SingleChoiceQuestion
func (t *Question) FromSingleChoiceQuestion(v SingleChoiceQuestion) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSingleChoiceQuestion performs a merge with any union data inside the Question, using the provided SingleChoiceQuestion
func (t *Question) MergeSingleChoiceQuestion(v SingleChoiceQuestion) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMultipleChoiceQuestion returns the union data inside the Question as a MultipleChoiceQuestion
func (t Question) AsMultipleChoiceQuestion() (MultipleChoiceQuestion, error) {
	var body MultipleChoiceQuestion
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMultipleChoiceQuestion overwrites any union data inside the Question as the provided MultipleChoiceQuestion
func (t *Question) FromMultipleChoiceQuestion(v MultipleChoiceQuestion) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMultipleChoiceQuestion performs a merge with any union data inside the Question, using the provided MultipleChoiceQuestion
func (t *Question) MergeMultipleChoiceQuestion(v MultipleChoiceQuestion) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Question) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Question) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// 管理者が回答を更新
	// (PUT /api/admin/answers/{answerId})
	AdminPutAnswer(ctx echo.Context, answerId AnswerId, params AdminPutAnswerParams) error
	// 合宿を作成（管理者用）
	// (POST /api/admin/camps)
	AdminPostCamp(ctx echo.Context, params AdminPostCampParams) error
	// 合宿を削除（管理者用）
	// (DELETE /api/admin/camps/{campId})
	AdminDeleteCamp(ctx echo.Context, campId CampId, params AdminDeleteCampParams) error
	// 合宿を更新（管理者用）
	// (PUT /api/admin/camps/{campId})
	AdminPutCamp(ctx echo.Context, campId CampId, params AdminPutCampParams) error
	// 画像をアップロード（管理者用）
	// (POST /api/admin/camps/{campId}/images)
	AdminPostImage(ctx echo.Context, campId CampId, params AdminPostImageParams) error
	// 支払い情報の一覧を取得（管理者用）
	// (GET /api/admin/camps/{campId}/payments)
	AdminGetPayments(ctx echo.Context, campId CampId, params AdminGetPaymentsParams) error
	// 支払い情報を作成（管理者用）
	// (POST /api/admin/camps/{campId}/payments)
	AdminPostPayment(ctx echo.Context, campId CampId, params AdminPostPaymentParams) error
	// 質問グループを作成（管理者用）
	// (POST /api/admin/camps/{campId}/question-groups)
	AdminPostQuestionGroup(ctx echo.Context, campId CampId, params AdminPostQuestionGroupParams) error
	// 点呼を作成（管理者用）
	// (POST /api/admin/camps/{campId}/roll-calls)
	AdminPostRollCall(ctx echo.Context, campId CampId, params AdminPostRollCallParams) error
	// 部屋グループを作成（管理者用）
	// (POST /api/admin/camps/{campId}/room-groups)
	AdminPostRoomGroup(ctx echo.Context, campId CampId, params AdminPostRoomGroupParams) error
	// 画像を削除（管理者用）
	// (DELETE /api/admin/images/{imageId})
	AdminDeleteImage(ctx echo.Context, imageId ImageId, params AdminDeleteImageParams) error
	// 画像を更新（管理者用）
	// (PUT /api/admin/images/{imageId})
	AdminPutImage(ctx echo.Context, imageId ImageId, params AdminPutImageParams) error
	// 選択肢を作成（管理者用）
	// (POST /api/admin/options)
	AdminPostOption(ctx echo.Context, params AdminPostOptionParams) error
	// 選択肢を削除（管理者用）
	// (DELETE /api/admin/options/{optionId})
	AdminDeleteOption(ctx echo.Context, optionId OptionId, params AdminDeleteOptionParams) error
	// 選択肢を更新（管理者用）
	// (PUT /api/admin/options/{optionId})
	AdminPutOption(ctx echo.Context, optionId OptionId, params AdminPutOptionParams) error
	// 支払い情報を更新（管理者用）
	// (PUT /api/admin/payments/{paymentId})
	AdminPutPayment(ctx echo.Context, paymentId PaymentId, params AdminPutPaymentParams) error
	// 質問グループを削除（管理者用）
	// (DELETE /api/admin/question-groups/{questionGroupId})
	AdminDeleteQuestionGroup(ctx echo.Context, questionGroupId QuestionGroupId, params AdminDeleteQuestionGroupParams) error
	// 質問グループを更新（管理者用）
	// (PUT /api/admin/question-groups/{questionGroupId})
	AdminPutQuestionGroup(ctx echo.Context, questionGroupId QuestionGroupId, params AdminPutQuestionGroupParams) error
	// 質問を作成（管理者用）
	// (POST /api/admin/questions)
	AdminPostQuestion(ctx echo.Context, params AdminPostQuestionParams) error
	// 質問を削除（管理者用）
	// (DELETE /api/admin/questions/{questionId})
	AdminDeleteQuestion(ctx echo.Context, questionId QuestionId, params AdminDeleteQuestionParams) error
	// 質問を更新（管理者用）
	// (PUT /api/admin/questions/{questionId})
	AdminPutQuestion(ctx echo.Context, questionId QuestionId, params AdminPutQuestionParams) error
	// 質問の回答を取得（管理者用）
	// (GET /api/admin/questions/{questionId}/answers)
	AdminGetAnswers(ctx echo.Context, questionId QuestionId, params AdminGetAnswersParams) error
	// 部屋グループを削除（管理者用）
	// (DELETE /api/admin/room-groups/{roomGroupId})
	AdminDeleteRoomGroup(ctx echo.Context, roomGroupId RoomGroupId, params AdminDeleteRoomGroupParams) error
	// 部屋グループを更新（管理者用）
	// (PUT /api/admin/room-groups/{roomGroupId})
	AdminPutRoomGroup(ctx echo.Context, roomGroupId RoomGroupId, params AdminPutRoomGroupParams) error
	// 部屋を作成（管理者用）
	// (POST /api/admin/rooms)
	AdminPostRoom(ctx echo.Context, params AdminPostRoomParams) error
	// 部屋を削除（管理者用）
	// (DELETE /api/admin/rooms/{roomId})
	AdminDeleteRoom(ctx echo.Context, roomId RoomId, params AdminDeleteRoomParams) error
	// 部屋を更新（管理者用）
	// (PUT /api/admin/rooms/{roomId})
	AdminPutRoom(ctx echo.Context, roomId RoomId, params AdminPutRoomParams) error
	// ユーザー情報を取得（管理者用）
	// (GET /api/admin/users/{userId})
	AdminGetUser(ctx echo.Context, userId UserId, params AdminGetUserParams) error
	// ユーザーの情報を更新（主に合宿係の権限管理用）
	// (PUT /api/admin/users/{userId})
	AdminPutUser(ctx echo.Context, userId UserId, params AdminPutUserParams) error
	// ユーザーにDMを送信（管理者用）
	// (POST /api/admin/users/{userId}/messages)
	AdminPostMessage(ctx echo.Context, userId UserId, params AdminPostMessageParams) error
	// 質問に回答する
	// (POST /api/answers)
	PostAnswer(ctx echo.Context, params PostAnswerParams) error
	// 自分の回答を更新
	// (PUT /api/answers/{answerId})
	PutAnswer(ctx echo.Context, answerId AnswerId, params PutAnswerParams) error
	// 合宿の一覧を取得
	// (GET /api/camps)
	GetCamps(ctx echo.Context) error
	// イベントの一覧を取得
	// (GET /api/camps/{campId}/events)
	GetEvents(ctx echo.Context, campId CampId) error
	// イベントを作成
	// (POST /api/camps/{campId}/events)
	PostEvent(ctx echo.Context, campId CampId, params PostEventParams) error
	// 画像の一覧を取得
	// (GET /api/camps/{campId}/images)
	GetImages(ctx echo.Context, campId CampId) error
	// 自分の合宿参加情報を取得
	// (GET /api/camps/{campId}/me)
	GetMyCamp(ctx echo.Context, campId CampId, params GetMyCampParams) error
	// 合宿の参加者一覧を取得
	// (GET /api/camps/{campId}/participants)
	GetCampParticipants(ctx echo.Context, campId CampId) error
	// 質問グループの一覧を取得
	// (GET /api/camps/{campId}/question-groups)
	GetQuestionGroups(ctx echo.Context, campId CampId) error
	// 合宿の参加登録を解除
	// (DELETE /api/camps/{campId}/register)
	DeleteCampRegister(ctx echo.Context, campId CampId, params DeleteCampRegisterParams) error
	// 合宿に参加登録
	// (POST /api/camps/{campId}/register)
	PostCampRegister(ctx echo.Context, campId CampId, params PostCampRegisterParams) error
	// 点呼の一覧を取得
	// (GET /api/camps/{campId}/roll-calls)
	GetRollCalls(ctx echo.Context, campId CampId) error
	// 部屋グループの一覧を取得
	// (GET /api/camps/{campId}/room-groups)
	GetRoomGroups(ctx echo.Context, campId CampId) error
	// イベントを削除
	// (DELETE /api/events/{eventId})
	DeleteEvent(ctx echo.Context, eventId EventId, params DeleteEventParams) error
	// イベントを更新
	// (PUT /api/events/{eventId})
	PutEvent(ctx echo.Context, eventId EventId, params PutEventParams) error
	// 画像を取得
	// (GET /api/images/{imageId})
	GetImage(ctx echo.Context, imageId ImageId) error
	// 自分の情報を取得
	// (GET /api/me)
	GetMe(ctx echo.Context, params GetMeParams) error
	// ある質問グループに対する自分の回答を取得
	// (GET /api/me/question-groups/{questionGroupId}/answers)
	GetMyAnswers(ctx echo.Context, questionGroupId QuestionGroupId, params GetMyAnswersParams) error
	// 質問の回答一覧を取得
	// (GET /api/questions/{questionId}/answers)
	GetAnswers(ctx echo.Context, questionId QuestionId) error
	// リアクションを削除
	// (DELETE /api/reactions/{reactionId})
	DeleteReaction(ctx echo.Context, reactionId ReactionId, params DeleteReactionParams) error
	// リアクションを更新
	// (PUT /api/reactions/{reactionId})
	PutReaction(ctx echo.Context, reactionId ReactionId, params PutReactionParams) error
	// 点呼のリアクション一覧を取得
	// (GET /api/roll-calls/{rollCallId}/reactions)
	GetRollCallReactions(ctx echo.Context, rollCallId RollCallId) error
	// 点呼にリアクションを追加
	// (POST /api/roll-calls/{rollCallId}/reactions)
	PostRollCallReaction(ctx echo.Context, rollCallId RollCallId, params PostRollCallReactionParams) error
	// 新たに作成されたリアクションをストリームで取得
	// (GET /api/roll-calls/{rollCallId}/reactions/stream)
	StreamRollCallReactions(ctx echo.Context, rollCallId RollCallId) error
	// 合宿係の一覧を取得
	// (GET /api/staffs)
	GetStaffs(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AdminPutAnswer converts echo context to params.
func (w *ServerInterfaceWrapper) AdminPutAnswer(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "answerId" -------------
	var answerId AnswerId

	err = runtime.BindStyledParameterWithOptions("simple", "answerId", ctx.Param("answerId"), &answerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter answerId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params AdminPutAnswerParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-Forwarded-User" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Forwarded-User")]; found {
		var XForwardedUser XForwardedUser
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Forwarded-User, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Forwarded-User", valueList[0], &XForwardedUser, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Forwarded-User: %s", err))
		}

		params.XForwardedUser = &XForwardedUser
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AdminPutAnswer(ctx, answerId, params)
	return err
}

// AdminPostCamp converts echo context to params.
func (w *ServerInterfaceWrapper) AdminPostCamp(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AdminPostCampParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-Forwarded-User" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Forwarded-User")]; found {
		var XForwardedUser XForwardedUser
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Forwarded-User, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Forwarded-User", valueList[0], &XForwardedUser, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Forwarded-User: %s", err))
		}

		params.XForwardedUser = &XForwardedUser
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AdminPostCamp(ctx, params)
	return err
}

// AdminDeleteCamp converts echo context to params.
func (w *ServerInterfaceWrapper) AdminDeleteCamp(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "campId" -------------
	var campId CampId

	err = runtime.BindStyledParameterWithOptions("simple", "campId", ctx.Param("campId"), &campId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter campId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params AdminDeleteCampParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-Forwarded-User" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Forwarded-User")]; found {
		var XForwardedUser XForwardedUser
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Forwarded-User, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Forwarded-User", valueList[0], &XForwardedUser, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Forwarded-User: %s", err))
		}

		params.XForwardedUser = &XForwardedUser
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AdminDeleteCamp(ctx, campId, params)
	return err
}

// AdminPutCamp converts echo context to params.
func (w *ServerInterfaceWrapper) AdminPutCamp(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "campId" -------------
	var campId CampId

	err = runtime.BindStyledParameterWithOptions("simple", "campId", ctx.Param("campId"), &campId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter campId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params AdminPutCampParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-Forwarded-User" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Forwarded-User")]; found {
		var XForwardedUser XForwardedUser
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Forwarded-User, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Forwarded-User", valueList[0], &XForwardedUser, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Forwarded-User: %s", err))
		}

		params.XForwardedUser = &XForwardedUser
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AdminPutCamp(ctx, campId, params)
	return err
}

// AdminPostImage converts echo context to params.
func (w *ServerInterfaceWrapper) AdminPostImage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "campId" -------------
	var campId CampId

	err = runtime.BindStyledParameterWithOptions("simple", "campId", ctx.Param("campId"), &campId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter campId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params AdminPostImageParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-Forwarded-User" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Forwarded-User")]; found {
		var XForwardedUser XForwardedUser
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Forwarded-User, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Forwarded-User", valueList[0], &XForwardedUser, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Forwarded-User: %s", err))
		}

		params.XForwardedUser = &XForwardedUser
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AdminPostImage(ctx, campId, params)
	return err
}

// AdminGetPayments converts echo context to params.
func (w *ServerInterfaceWrapper) AdminGetPayments(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "campId" -------------
	var campId CampId

	err = runtime.BindStyledParameterWithOptions("simple", "campId", ctx.Param("campId"), &campId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter campId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params AdminGetPaymentsParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-Forwarded-User" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Forwarded-User")]; found {
		var XForwardedUser XForwardedUser
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Forwarded-User, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Forwarded-User", valueList[0], &XForwardedUser, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Forwarded-User: %s", err))
		}

		params.XForwardedUser = &XForwardedUser
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AdminGetPayments(ctx, campId, params)
	return err
}

// AdminPostPayment converts echo context to params.
func (w *ServerInterfaceWrapper) AdminPostPayment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "campId" -------------
	var campId CampId

	err = runtime.BindStyledParameterWithOptions("simple", "campId", ctx.Param("campId"), &campId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter campId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params AdminPostPaymentParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-Forwarded-User" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Forwarded-User")]; found {
		var XForwardedUser XForwardedUser
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Forwarded-User, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Forwarded-User", valueList[0], &XForwardedUser, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Forwarded-User: %s", err))
		}

		params.XForwardedUser = &XForwardedUser
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AdminPostPayment(ctx, campId, params)
	return err
}

// AdminPostQuestionGroup converts echo context to params.
func (w *ServerInterfaceWrapper) AdminPostQuestionGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "campId" -------------
	var campId CampId

	err = runtime.BindStyledParameterWithOptions("simple", "campId", ctx.Param("campId"), &campId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter campId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params AdminPostQuestionGroupParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-Forwarded-User" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Forwarded-User")]; found {
		var XForwardedUser XForwardedUser
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Forwarded-User, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Forwarded-User", valueList[0], &XForwardedUser, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Forwarded-User: %s", err))
		}

		params.XForwardedUser = &XForwardedUser
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AdminPostQuestionGroup(ctx, campId, params)
	return err
}

// AdminPostRollCall converts echo context to params.
func (w *ServerInterfaceWrapper) AdminPostRollCall(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "campId" -------------
	var campId CampId

	err = runtime.BindStyledParameterWithOptions("simple", "campId", ctx.Param("campId"), &campId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter campId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params AdminPostRollCallParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-Forwarded-User" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Forwarded-User")]; found {
		var XForwardedUser XForwardedUser
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Forwarded-User, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Forwarded-User", valueList[0], &XForwardedUser, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Forwarded-User: %s", err))
		}

		params.XForwardedUser = &XForwardedUser
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AdminPostRollCall(ctx, campId, params)
	return err
}

// AdminPostRoomGroup converts echo context to params.
func (w *ServerInterfaceWrapper) AdminPostRoomGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "campId" -------------
	var campId CampId

	err = runtime.BindStyledParameterWithOptions("simple", "campId", ctx.Param("campId"), &campId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter campId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params AdminPostRoomGroupParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-Forwarded-User" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Forwarded-User")]; found {
		var XForwardedUser XForwardedUser
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Forwarded-User, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Forwarded-User", valueList[0], &XForwardedUser, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Forwarded-User: %s", err))
		}

		params.XForwardedUser = &XForwardedUser
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AdminPostRoomGroup(ctx, campId, params)
	return err
}

// AdminDeleteImage converts echo context to params.
func (w *ServerInterfaceWrapper) AdminDeleteImage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "imageId" -------------
	var imageId ImageId

	err = runtime.BindStyledParameterWithOptions("simple", "imageId", ctx.Param("imageId"), &imageId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter imageId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params AdminDeleteImageParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-Forwarded-User" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Forwarded-User")]; found {
		var XForwardedUser XForwardedUser
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Forwarded-User, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Forwarded-User", valueList[0], &XForwardedUser, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Forwarded-User: %s", err))
		}

		params.XForwardedUser = &XForwardedUser
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AdminDeleteImage(ctx, imageId, params)
	return err
}

// AdminPutImage converts echo context to params.
func (w *ServerInterfaceWrapper) AdminPutImage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "imageId" -------------
	var imageId ImageId

	err = runtime.BindStyledParameterWithOptions("simple", "imageId", ctx.Param("imageId"), &imageId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter imageId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params AdminPutImageParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-Forwarded-User" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Forwarded-User")]; found {
		var XForwardedUser XForwardedUser
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Forwarded-User, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Forwarded-User", valueList[0], &XForwardedUser, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Forwarded-User: %s", err))
		}

		params.XForwardedUser = &XForwardedUser
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AdminPutImage(ctx, imageId, params)
	return err
}

// AdminPostOption converts echo context to params.
func (w *ServerInterfaceWrapper) AdminPostOption(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AdminPostOptionParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-Forwarded-User" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Forwarded-User")]; found {
		var XForwardedUser XForwardedUser
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Forwarded-User, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Forwarded-User", valueList[0], &XForwardedUser, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Forwarded-User: %s", err))
		}

		params.XForwardedUser = &XForwardedUser
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AdminPostOption(ctx, params)
	return err
}

// AdminDeleteOption converts echo context to params.
func (w *ServerInterfaceWrapper) AdminDeleteOption(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "optionId" -------------
	var optionId OptionId

	err = runtime.BindStyledParameterWithOptions("simple", "optionId", ctx.Param("optionId"), &optionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter optionId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params AdminDeleteOptionParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-Forwarded-User" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Forwarded-User")]; found {
		var XForwardedUser XForwardedUser
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Forwarded-User, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Forwarded-User", valueList[0], &XForwardedUser, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Forwarded-User: %s", err))
		}

		params.XForwardedUser = &XForwardedUser
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AdminDeleteOption(ctx, optionId, params)
	return err
}

// AdminPutOption converts echo context to params.
func (w *ServerInterfaceWrapper) AdminPutOption(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "optionId" -------------
	var optionId OptionId

	err = runtime.BindStyledParameterWithOptions("simple", "optionId", ctx.Param("optionId"), &optionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter optionId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params AdminPutOptionParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-Forwarded-User" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Forwarded-User")]; found {
		var XForwardedUser XForwardedUser
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Forwarded-User, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Forwarded-User", valueList[0], &XForwardedUser, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Forwarded-User: %s", err))
		}

		params.XForwardedUser = &XForwardedUser
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AdminPutOption(ctx, optionId, params)
	return err
}

// AdminPutPayment converts echo context to params.
func (w *ServerInterfaceWrapper) AdminPutPayment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "paymentId" -------------
	var paymentId PaymentId

	err = runtime.BindStyledParameterWithOptions("simple", "paymentId", ctx.Param("paymentId"), &paymentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paymentId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params AdminPutPaymentParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-Forwarded-User" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Forwarded-User")]; found {
		var XForwardedUser XForwardedUser
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Forwarded-User, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Forwarded-User", valueList[0], &XForwardedUser, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Forwarded-User: %s", err))
		}

		params.XForwardedUser = &XForwardedUser
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AdminPutPayment(ctx, paymentId, params)
	return err
}

// AdminDeleteQuestionGroup converts echo context to params.
func (w *ServerInterfaceWrapper) AdminDeleteQuestionGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "questionGroupId" -------------
	var questionGroupId QuestionGroupId

	err = runtime.BindStyledParameterWithOptions("simple", "questionGroupId", ctx.Param("questionGroupId"), &questionGroupId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter questionGroupId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params AdminDeleteQuestionGroupParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-Forwarded-User" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Forwarded-User")]; found {
		var XForwardedUser XForwardedUser
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Forwarded-User, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Forwarded-User", valueList[0], &XForwardedUser, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Forwarded-User: %s", err))
		}

		params.XForwardedUser = &XForwardedUser
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AdminDeleteQuestionGroup(ctx, questionGroupId, params)
	return err
}

// AdminPutQuestionGroup converts echo context to params.
func (w *ServerInterfaceWrapper) AdminPutQuestionGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "questionGroupId" -------------
	var questionGroupId QuestionGroupId

	err = runtime.BindStyledParameterWithOptions("simple", "questionGroupId", ctx.Param("questionGroupId"), &questionGroupId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter questionGroupId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params AdminPutQuestionGroupParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-Forwarded-User" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Forwarded-User")]; found {
		var XForwardedUser XForwardedUser
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Forwarded-User, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Forwarded-User", valueList[0], &XForwardedUser, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Forwarded-User: %s", err))
		}

		params.XForwardedUser = &XForwardedUser
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AdminPutQuestionGroup(ctx, questionGroupId, params)
	return err
}

// AdminPostQuestion converts echo context to params.
func (w *ServerInterfaceWrapper) AdminPostQuestion(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AdminPostQuestionParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-Forwarded-User" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Forwarded-User")]; found {
		var XForwardedUser XForwardedUser
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Forwarded-User, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Forwarded-User", valueList[0], &XForwardedUser, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Forwarded-User: %s", err))
		}

		params.XForwardedUser = &XForwardedUser
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AdminPostQuestion(ctx, params)
	return err
}

// AdminDeleteQuestion converts echo context to params.
func (w *ServerInterfaceWrapper) AdminDeleteQuestion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "questionId" -------------
	var questionId QuestionId

	err = runtime.BindStyledParameterWithOptions("simple", "questionId", ctx.Param("questionId"), &questionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter questionId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params AdminDeleteQuestionParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-Forwarded-User" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Forwarded-User")]; found {
		var XForwardedUser XForwardedUser
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Forwarded-User, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Forwarded-User", valueList[0], &XForwardedUser, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Forwarded-User: %s", err))
		}

		params.XForwardedUser = &XForwardedUser
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AdminDeleteQuestion(ctx, questionId, params)
	return err
}

// AdminPutQuestion converts echo context to params.
func (w *ServerInterfaceWrapper) AdminPutQuestion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "questionId" -------------
	var questionId QuestionId

	err = runtime.BindStyledParameterWithOptions("simple", "questionId", ctx.Param("questionId"), &questionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter questionId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params AdminPutQuestionParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-Forwarded-User" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Forwarded-User")]; found {
		var XForwardedUser XForwardedUser
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Forwarded-User, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Forwarded-User", valueList[0], &XForwardedUser, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Forwarded-User: %s", err))
		}

		params.XForwardedUser = &XForwardedUser
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AdminPutQuestion(ctx, questionId, params)
	return err
}

// AdminGetAnswers converts echo context to params.
func (w *ServerInterfaceWrapper) AdminGetAnswers(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "questionId" -------------
	var questionId QuestionId

	err = runtime.BindStyledParameterWithOptions("simple", "questionId", ctx.Param("questionId"), &questionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter questionId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params AdminGetAnswersParams
	// ------------- Optional query parameter "userId" -------------

	err = runtime.BindQueryParameter("form", true, false, "userId", ctx.QueryParams(), &params.UserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-Forwarded-User" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Forwarded-User")]; found {
		var XForwardedUser XForwardedUser
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Forwarded-User, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Forwarded-User", valueList[0], &XForwardedUser, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Forwarded-User: %s", err))
		}

		params.XForwardedUser = &XForwardedUser
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AdminGetAnswers(ctx, questionId, params)
	return err
}

// AdminDeleteRoomGroup converts echo context to params.
func (w *ServerInterfaceWrapper) AdminDeleteRoomGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "roomGroupId" -------------
	var roomGroupId RoomGroupId

	err = runtime.BindStyledParameterWithOptions("simple", "roomGroupId", ctx.Param("roomGroupId"), &roomGroupId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter roomGroupId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params AdminDeleteRoomGroupParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-Forwarded-User" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Forwarded-User")]; found {
		var XForwardedUser XForwardedUser
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Forwarded-User, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Forwarded-User", valueList[0], &XForwardedUser, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Forwarded-User: %s", err))
		}

		params.XForwardedUser = &XForwardedUser
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AdminDeleteRoomGroup(ctx, roomGroupId, params)
	return err
}

// AdminPutRoomGroup converts echo context to params.
func (w *ServerInterfaceWrapper) AdminPutRoomGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "roomGroupId" -------------
	var roomGroupId RoomGroupId

	err = runtime.BindStyledParameterWithOptions("simple", "roomGroupId", ctx.Param("roomGroupId"), &roomGroupId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter roomGroupId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params AdminPutRoomGroupParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-Forwarded-User" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Forwarded-User")]; found {
		var XForwardedUser XForwardedUser
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Forwarded-User, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Forwarded-User", valueList[0], &XForwardedUser, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Forwarded-User: %s", err))
		}

		params.XForwardedUser = &XForwardedUser
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AdminPutRoomGroup(ctx, roomGroupId, params)
	return err
}

// AdminPostRoom converts echo context to params.
func (w *ServerInterfaceWrapper) AdminPostRoom(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AdminPostRoomParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-Forwarded-User" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Forwarded-User")]; found {
		var XForwardedUser XForwardedUser
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Forwarded-User, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Forwarded-User", valueList[0], &XForwardedUser, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Forwarded-User: %s", err))
		}

		params.XForwardedUser = &XForwardedUser
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AdminPostRoom(ctx, params)
	return err
}

// AdminDeleteRoom converts echo context to params.
func (w *ServerInterfaceWrapper) AdminDeleteRoom(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "roomId" -------------
	var roomId RoomId

	err = runtime.BindStyledParameterWithOptions("simple", "roomId", ctx.Param("roomId"), &roomId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter roomId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params AdminDeleteRoomParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-Forwarded-User" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Forwarded-User")]; found {
		var XForwardedUser XForwardedUser
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Forwarded-User, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Forwarded-User", valueList[0], &XForwardedUser, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Forwarded-User: %s", err))
		}

		params.XForwardedUser = &XForwardedUser
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AdminDeleteRoom(ctx, roomId, params)
	return err
}

// AdminPutRoom converts echo context to params.
func (w *ServerInterfaceWrapper) AdminPutRoom(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "roomId" -------------
	var roomId RoomId

	err = runtime.BindStyledParameterWithOptions("simple", "roomId", ctx.Param("roomId"), &roomId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter roomId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params AdminPutRoomParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-Forwarded-User" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Forwarded-User")]; found {
		var XForwardedUser XForwardedUser
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Forwarded-User, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Forwarded-User", valueList[0], &XForwardedUser, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Forwarded-User: %s", err))
		}

		params.XForwardedUser = &XForwardedUser
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AdminPutRoom(ctx, roomId, params)
	return err
}

// AdminGetUser converts echo context to params.
func (w *ServerInterfaceWrapper) AdminGetUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "userId", ctx.Param("userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params AdminGetUserParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-Forwarded-User" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Forwarded-User")]; found {
		var XForwardedUser XForwardedUser
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Forwarded-User, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Forwarded-User", valueList[0], &XForwardedUser, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Forwarded-User: %s", err))
		}

		params.XForwardedUser = &XForwardedUser
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AdminGetUser(ctx, userId, params)
	return err
}

// AdminPutUser converts echo context to params.
func (w *ServerInterfaceWrapper) AdminPutUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "userId", ctx.Param("userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params AdminPutUserParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-Forwarded-User" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Forwarded-User")]; found {
		var XForwardedUser XForwardedUser
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Forwarded-User, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Forwarded-User", valueList[0], &XForwardedUser, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Forwarded-User: %s", err))
		}

		params.XForwardedUser = &XForwardedUser
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AdminPutUser(ctx, userId, params)
	return err
}

// AdminPostMessage converts echo context to params.
func (w *ServerInterfaceWrapper) AdminPostMessage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "userId", ctx.Param("userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params AdminPostMessageParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-Forwarded-User" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Forwarded-User")]; found {
		var XForwardedUser XForwardedUser
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Forwarded-User, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Forwarded-User", valueList[0], &XForwardedUser, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Forwarded-User: %s", err))
		}

		params.XForwardedUser = &XForwardedUser
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AdminPostMessage(ctx, userId, params)
	return err
}

// PostAnswer converts echo context to params.
func (w *ServerInterfaceWrapper) PostAnswer(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAnswerParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-Forwarded-User" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Forwarded-User")]; found {
		var XForwardedUser XForwardedUser
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Forwarded-User, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Forwarded-User", valueList[0], &XForwardedUser, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Forwarded-User: %s", err))
		}

		params.XForwardedUser = &XForwardedUser
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostAnswer(ctx, params)
	return err
}

// PutAnswer converts echo context to params.
func (w *ServerInterfaceWrapper) PutAnswer(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "answerId" -------------
	var answerId AnswerId

	err = runtime.BindStyledParameterWithOptions("simple", "answerId", ctx.Param("answerId"), &answerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter answerId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PutAnswerParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-Forwarded-User" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Forwarded-User")]; found {
		var XForwardedUser XForwardedUser
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Forwarded-User, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Forwarded-User", valueList[0], &XForwardedUser, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Forwarded-User: %s", err))
		}

		params.XForwardedUser = &XForwardedUser
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutAnswer(ctx, answerId, params)
	return err
}

// GetCamps converts echo context to params.
func (w *ServerInterfaceWrapper) GetCamps(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCamps(ctx)
	return err
}

// GetEvents converts echo context to params.
func (w *ServerInterfaceWrapper) GetEvents(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "campId" -------------
	var campId CampId

	err = runtime.BindStyledParameterWithOptions("simple", "campId", ctx.Param("campId"), &campId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter campId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEvents(ctx, campId)
	return err
}

// PostEvent converts echo context to params.
func (w *ServerInterfaceWrapper) PostEvent(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "campId" -------------
	var campId CampId

	err = runtime.BindStyledParameterWithOptions("simple", "campId", ctx.Param("campId"), &campId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter campId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PostEventParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-Forwarded-User" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Forwarded-User")]; found {
		var XForwardedUser XForwardedUser
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Forwarded-User, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Forwarded-User", valueList[0], &XForwardedUser, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Forwarded-User: %s", err))
		}

		params.XForwardedUser = &XForwardedUser
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostEvent(ctx, campId, params)
	return err
}

// GetImages converts echo context to params.
func (w *ServerInterfaceWrapper) GetImages(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "campId" -------------
	var campId CampId

	err = runtime.BindStyledParameterWithOptions("simple", "campId", ctx.Param("campId"), &campId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter campId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetImages(ctx, campId)
	return err
}

// GetMyCamp converts echo context to params.
func (w *ServerInterfaceWrapper) GetMyCamp(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "campId" -------------
	var campId CampId

	err = runtime.BindStyledParameterWithOptions("simple", "campId", ctx.Param("campId"), &campId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter campId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMyCampParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-Forwarded-User" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Forwarded-User")]; found {
		var XForwardedUser XForwardedUser
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Forwarded-User, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Forwarded-User", valueList[0], &XForwardedUser, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Forwarded-User: %s", err))
		}

		params.XForwardedUser = &XForwardedUser
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMyCamp(ctx, campId, params)
	return err
}

// GetCampParticipants converts echo context to params.
func (w *ServerInterfaceWrapper) GetCampParticipants(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "campId" -------------
	var campId CampId

	err = runtime.BindStyledParameterWithOptions("simple", "campId", ctx.Param("campId"), &campId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter campId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCampParticipants(ctx, campId)
	return err
}

// GetQuestionGroups converts echo context to params.
func (w *ServerInterfaceWrapper) GetQuestionGroups(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "campId" -------------
	var campId CampId

	err = runtime.BindStyledParameterWithOptions("simple", "campId", ctx.Param("campId"), &campId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter campId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetQuestionGroups(ctx, campId)
	return err
}

// DeleteCampRegister converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCampRegister(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "campId" -------------
	var campId CampId

	err = runtime.BindStyledParameterWithOptions("simple", "campId", ctx.Param("campId"), &campId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter campId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteCampRegisterParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-Forwarded-User" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Forwarded-User")]; found {
		var XForwardedUser XForwardedUser
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Forwarded-User, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Forwarded-User", valueList[0], &XForwardedUser, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Forwarded-User: %s", err))
		}

		params.XForwardedUser = &XForwardedUser
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteCampRegister(ctx, campId, params)
	return err
}

// PostCampRegister converts echo context to params.
func (w *ServerInterfaceWrapper) PostCampRegister(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "campId" -------------
	var campId CampId

	err = runtime.BindStyledParameterWithOptions("simple", "campId", ctx.Param("campId"), &campId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter campId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PostCampRegisterParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-Forwarded-User" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Forwarded-User")]; found {
		var XForwardedUser XForwardedUser
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Forwarded-User, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Forwarded-User", valueList[0], &XForwardedUser, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Forwarded-User: %s", err))
		}

		params.XForwardedUser = &XForwardedUser
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostCampRegister(ctx, campId, params)
	return err
}

// GetRollCalls converts echo context to params.
func (w *ServerInterfaceWrapper) GetRollCalls(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "campId" -------------
	var campId CampId

	err = runtime.BindStyledParameterWithOptions("simple", "campId", ctx.Param("campId"), &campId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter campId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRollCalls(ctx, campId)
	return err
}

// GetRoomGroups converts echo context to params.
func (w *ServerInterfaceWrapper) GetRoomGroups(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "campId" -------------
	var campId CampId

	err = runtime.BindStyledParameterWithOptions("simple", "campId", ctx.Param("campId"), &campId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter campId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRoomGroups(ctx, campId)
	return err
}

// DeleteEvent converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteEvent(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "eventId" -------------
	var eventId EventId

	err = runtime.BindStyledParameterWithOptions("simple", "eventId", ctx.Param("eventId"), &eventId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter eventId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteEventParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-Forwarded-User" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Forwarded-User")]; found {
		var XForwardedUser XForwardedUser
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Forwarded-User, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Forwarded-User", valueList[0], &XForwardedUser, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Forwarded-User: %s", err))
		}

		params.XForwardedUser = &XForwardedUser
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteEvent(ctx, eventId, params)
	return err
}

// PutEvent converts echo context to params.
func (w *ServerInterfaceWrapper) PutEvent(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "eventId" -------------
	var eventId EventId

	err = runtime.BindStyledParameterWithOptions("simple", "eventId", ctx.Param("eventId"), &eventId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter eventId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PutEventParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-Forwarded-User" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Forwarded-User")]; found {
		var XForwardedUser XForwardedUser
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Forwarded-User, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Forwarded-User", valueList[0], &XForwardedUser, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Forwarded-User: %s", err))
		}

		params.XForwardedUser = &XForwardedUser
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutEvent(ctx, eventId, params)
	return err
}

// GetImage converts echo context to params.
func (w *ServerInterfaceWrapper) GetImage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "imageId" -------------
	var imageId ImageId

	err = runtime.BindStyledParameterWithOptions("simple", "imageId", ctx.Param("imageId"), &imageId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter imageId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetImage(ctx, imageId)
	return err
}

// GetMe converts echo context to params.
func (w *ServerInterfaceWrapper) GetMe(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMeParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-Forwarded-User" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Forwarded-User")]; found {
		var XForwardedUser XForwardedUser
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Forwarded-User, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Forwarded-User", valueList[0], &XForwardedUser, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Forwarded-User: %s", err))
		}

		params.XForwardedUser = &XForwardedUser
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMe(ctx, params)
	return err
}

// GetMyAnswers converts echo context to params.
func (w *ServerInterfaceWrapper) GetMyAnswers(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "questionGroupId" -------------
	var questionGroupId QuestionGroupId

	err = runtime.BindStyledParameterWithOptions("simple", "questionGroupId", ctx.Param("questionGroupId"), &questionGroupId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter questionGroupId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMyAnswersParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-Forwarded-User" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Forwarded-User")]; found {
		var XForwardedUser XForwardedUser
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Forwarded-User, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Forwarded-User", valueList[0], &XForwardedUser, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Forwarded-User: %s", err))
		}

		params.XForwardedUser = &XForwardedUser
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMyAnswers(ctx, questionGroupId, params)
	return err
}

// GetAnswers converts echo context to params.
func (w *ServerInterfaceWrapper) GetAnswers(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "questionId" -------------
	var questionId QuestionId

	err = runtime.BindStyledParameterWithOptions("simple", "questionId", ctx.Param("questionId"), &questionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter questionId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAnswers(ctx, questionId)
	return err
}

// DeleteReaction converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteReaction(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "reactionId" -------------
	var reactionId ReactionId

	err = runtime.BindStyledParameterWithOptions("simple", "reactionId", ctx.Param("reactionId"), &reactionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reactionId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteReactionParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-Forwarded-User" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Forwarded-User")]; found {
		var XForwardedUser XForwardedUser
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Forwarded-User, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Forwarded-User", valueList[0], &XForwardedUser, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Forwarded-User: %s", err))
		}

		params.XForwardedUser = &XForwardedUser
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteReaction(ctx, reactionId, params)
	return err
}

// PutReaction converts echo context to params.
func (w *ServerInterfaceWrapper) PutReaction(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "reactionId" -------------
	var reactionId ReactionId

	err = runtime.BindStyledParameterWithOptions("simple", "reactionId", ctx.Param("reactionId"), &reactionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reactionId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PutReactionParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-Forwarded-User" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Forwarded-User")]; found {
		var XForwardedUser XForwardedUser
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Forwarded-User, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Forwarded-User", valueList[0], &XForwardedUser, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Forwarded-User: %s", err))
		}

		params.XForwardedUser = &XForwardedUser
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutReaction(ctx, reactionId, params)
	return err
}

// GetRollCallReactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetRollCallReactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "rollCallId" -------------
	var rollCallId RollCallId

	err = runtime.BindStyledParameterWithOptions("simple", "rollCallId", ctx.Param("rollCallId"), &rollCallId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rollCallId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRollCallReactions(ctx, rollCallId)
	return err
}

// PostRollCallReaction converts echo context to params.
func (w *ServerInterfaceWrapper) PostRollCallReaction(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "rollCallId" -------------
	var rollCallId RollCallId

	err = runtime.BindStyledParameterWithOptions("simple", "rollCallId", ctx.Param("rollCallId"), &rollCallId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rollCallId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PostRollCallReactionParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-Forwarded-User" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Forwarded-User")]; found {
		var XForwardedUser XForwardedUser
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Forwarded-User, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Forwarded-User", valueList[0], &XForwardedUser, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Forwarded-User: %s", err))
		}

		params.XForwardedUser = &XForwardedUser
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostRollCallReaction(ctx, rollCallId, params)
	return err
}

// StreamRollCallReactions converts echo context to params.
func (w *ServerInterfaceWrapper) StreamRollCallReactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "rollCallId" -------------
	var rollCallId RollCallId

	err = runtime.BindStyledParameterWithOptions("simple", "rollCallId", ctx.Param("rollCallId"), &rollCallId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rollCallId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.StreamRollCallReactions(ctx, rollCallId)
	return err
}

// GetStaffs converts echo context to params.
func (w *ServerInterfaceWrapper) GetStaffs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetStaffs(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.PUT(baseURL+"/api/admin/answers/:answerId", wrapper.AdminPutAnswer)
	router.POST(baseURL+"/api/admin/camps", wrapper.AdminPostCamp)
	router.DELETE(baseURL+"/api/admin/camps/:campId", wrapper.AdminDeleteCamp)
	router.PUT(baseURL+"/api/admin/camps/:campId", wrapper.AdminPutCamp)
	router.POST(baseURL+"/api/admin/camps/:campId/images", wrapper.AdminPostImage)
	router.GET(baseURL+"/api/admin/camps/:campId/payments", wrapper.AdminGetPayments)
	router.POST(baseURL+"/api/admin/camps/:campId/payments", wrapper.AdminPostPayment)
	router.POST(baseURL+"/api/admin/camps/:campId/question-groups", wrapper.AdminPostQuestionGroup)
	router.POST(baseURL+"/api/admin/camps/:campId/roll-calls", wrapper.AdminPostRollCall)
	router.POST(baseURL+"/api/admin/camps/:campId/room-groups", wrapper.AdminPostRoomGroup)
	router.DELETE(baseURL+"/api/admin/images/:imageId", wrapper.AdminDeleteImage)
	router.PUT(baseURL+"/api/admin/images/:imageId", wrapper.AdminPutImage)
	router.POST(baseURL+"/api/admin/options", wrapper.AdminPostOption)
	router.DELETE(baseURL+"/api/admin/options/:optionId", wrapper.AdminDeleteOption)
	router.PUT(baseURL+"/api/admin/options/:optionId", wrapper.AdminPutOption)
	router.PUT(baseURL+"/api/admin/payments/:paymentId", wrapper.AdminPutPayment)
	router.DELETE(baseURL+"/api/admin/question-groups/:questionGroupId", wrapper.AdminDeleteQuestionGroup)
	router.PUT(baseURL+"/api/admin/question-groups/:questionGroupId", wrapper.AdminPutQuestionGroup)
	router.POST(baseURL+"/api/admin/questions", wrapper.AdminPostQuestion)
	router.DELETE(baseURL+"/api/admin/questions/:questionId", wrapper.AdminDeleteQuestion)
	router.PUT(baseURL+"/api/admin/questions/:questionId", wrapper.AdminPutQuestion)
	router.GET(baseURL+"/api/admin/questions/:questionId/answers", wrapper.AdminGetAnswers)
	router.DELETE(baseURL+"/api/admin/room-groups/:roomGroupId", wrapper.AdminDeleteRoomGroup)
	router.PUT(baseURL+"/api/admin/room-groups/:roomGroupId", wrapper.AdminPutRoomGroup)
	router.POST(baseURL+"/api/admin/rooms", wrapper.AdminPostRoom)
	router.DELETE(baseURL+"/api/admin/rooms/:roomId", wrapper.AdminDeleteRoom)
	router.PUT(baseURL+"/api/admin/rooms/:roomId", wrapper.AdminPutRoom)
	router.GET(baseURL+"/api/admin/users/:userId", wrapper.AdminGetUser)
	router.PUT(baseURL+"/api/admin/users/:userId", wrapper.AdminPutUser)
	router.POST(baseURL+"/api/admin/users/:userId/messages", wrapper.AdminPostMessage)
	router.POST(baseURL+"/api/answers", wrapper.PostAnswer)
	router.PUT(baseURL+"/api/answers/:answerId", wrapper.PutAnswer)
	router.GET(baseURL+"/api/camps", wrapper.GetCamps)
	router.GET(baseURL+"/api/camps/:campId/events", wrapper.GetEvents)
	router.POST(baseURL+"/api/camps/:campId/events", wrapper.PostEvent)
	router.GET(baseURL+"/api/camps/:campId/images", wrapper.GetImages)
	router.GET(baseURL+"/api/camps/:campId/me", wrapper.GetMyCamp)
	router.GET(baseURL+"/api/camps/:campId/participants", wrapper.GetCampParticipants)
	router.GET(baseURL+"/api/camps/:campId/question-groups", wrapper.GetQuestionGroups)
	router.DELETE(baseURL+"/api/camps/:campId/register", wrapper.DeleteCampRegister)
	router.POST(baseURL+"/api/camps/:campId/register", wrapper.PostCampRegister)
	router.GET(baseURL+"/api/camps/:campId/roll-calls", wrapper.GetRollCalls)
	router.GET(baseURL+"/api/camps/:campId/room-groups", wrapper.GetRoomGroups)
	router.DELETE(baseURL+"/api/events/:eventId", wrapper.DeleteEvent)
	router.PUT(baseURL+"/api/events/:eventId", wrapper.PutEvent)
	router.GET(baseURL+"/api/images/:imageId", wrapper.GetImage)
	router.GET(baseURL+"/api/me", wrapper.GetMe)
	router.GET(baseURL+"/api/me/question-groups/:questionGroupId/answers", wrapper.GetMyAnswers)
	router.GET(baseURL+"/api/questions/:questionId/answers", wrapper.GetAnswers)
	router.DELETE(baseURL+"/api/reactions/:reactionId", wrapper.DeleteReaction)
	router.PUT(baseURL+"/api/reactions/:reactionId", wrapper.PutReaction)
	router.GET(baseURL+"/api/roll-calls/:rollCallId/reactions", wrapper.GetRollCallReactions)
	router.POST(baseURL+"/api/roll-calls/:rollCallId/reactions", wrapper.PostRollCallReaction)
	router.GET(baseURL+"/api/roll-calls/:rollCallId/reactions/stream", wrapper.StreamRollCallReactions)
	router.GET(baseURL+"/api/staffs", wrapper.GetStaffs)

}
