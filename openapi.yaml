---
openapi: 3.0.3

info:
  title: rucQ API
  version: 0.1.0
  description: rucQ API

servers:
  - url: http://localhost:8080
    description: 開発環境

paths:
  /api/camps:
    get:
      summary: 合宿の一覧を取得
      tags:
        - Camps
      operationId: getCamps
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Camp"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /api/admin/camps:
    post:
      summary: 合宿を作成（管理者用）
      tags:
        - Camps
      operationId: adminPostCamp
      parameters:
        - $ref: "#/components/parameters/X-Forwarded-User"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Camp"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Camp"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /api/camps/{campId}/register:
    post:
      summary: 合宿に参加登録
      tags:
        - Camps
      operationId: postCampRegister
      parameters:
        - $ref: "#/components/parameters/CampId"
        - $ref: "#/components/parameters/X-Forwarded-User"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
    delete:
      summary: 合宿の参加登録を解除
      tags:
        - Camps
      operationId: deleteCampRegister
      parameters:
        - $ref: "#/components/parameters/CampId"
        - $ref: "#/components/parameters/X-Forwarded-User"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /api/admin/camps/{campId}:
    put:
      summary: 合宿を更新（管理者用）
      tags:
        - Camps
      operationId: adminPutCamp
      parameters:
        - $ref: "#/components/parameters/CampId"
        - $ref: "#/components/parameters/X-Forwarded-User"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Camp"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Camp"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
    delete:
      summary: 合宿を削除（管理者用）
      tags:
        - Camps
      operationId: adminDeleteCamp
      parameters:
        - $ref: "#/components/parameters/CampId"
        - $ref: "#/components/parameters/X-Forwarded-User"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /api/camps/{campId}/participants:
    get:
      summary: 合宿の参加者一覧を取得
      tags:
        - Camps
      operationId: getCampParticipants
      parameters:
        - $ref: "#/components/parameters/CampId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /api/camps/{campId}/events:
    get:
      summary: イベントの一覧を取得
      tags:
        - Events
      operationId: getEvents
      parameters:
        - $ref: "#/components/parameters/CampId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Event"
        "500":
          $ref: "#/components/responses/InternalServerError"
    post:
      summary: イベントを作成
      tags:
        - Events
      operationId: postEvent
      parameters:
        - $ref: "#/components/parameters/X-Forwarded-User"
        - $ref: "#/components/parameters/CampId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Event"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /api/events/{eventId}:
    get:
      summary: イベントの詳細を取得
      tags:
        - Events
      operationId: getEvent
      parameters:
        - $ref: "#/components/parameters/EventId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
    put:
      summary: イベントを更新
      tags:
        - Events
      operationId: putEvent
      parameters:
        - $ref: "#/components/parameters/EventId"
        - $ref: "#/components/parameters/X-Forwarded-User"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Event"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
    delete:
      summary: イベントを削除
      tags:
        - Events
      operationId: deleteEvent
      parameters:
        - $ref: "#/components/parameters/EventId"
        - $ref: "#/components/parameters/X-Forwarded-User"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /api/me:
    get:
      summary: 自分の情報を取得
      tags:
        - Users
      operationId: getMe
      parameters:
        - $ref: "#/components/parameters/X-Forwarded-User"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /api/camps/{campId}/me:
    get:
      summary: 自分の合宿参加情報を取得
      tags:
        - Users
      operationId: getMyCamp
      parameters:
        - $ref: "#/components/parameters/CampId"
        - $ref: "#/components/parameters/X-Forwarded-User"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Dashboard"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /api/staffs:
    get:
      summary: 合宿係の一覧を取得
      tags:
        - Users
      operationId: getStaffs
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /api/admin/users/{userId}:
    get:
      summary: ユーザー情報を取得（管理者用）
      tags:
        - Users
      operationId: adminGetUser
      parameters:
        - $ref: "#/components/parameters/UserId"
        - $ref: "#/components/parameters/X-Forwarded-User"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
    put:
      summary: ユーザーの情報を更新（主に合宿係の権限管理用）
      tags:
        - Users
      operationId: adminPutUser
      parameters:
        - $ref: "#/components/parameters/UserId"
        - $ref: "#/components/parameters/X-Forwarded-User"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /api/admin/users/{userId}/messages:
    post:
      summary: ユーザーにDMを送信（管理者用）
      tags:
        - Users
      operationId: adminPostMessage
      parameters:
        - $ref: "#/components/parameters/UserId"
        - $ref: "#/components/parameters/X-Forwarded-User"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Message"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /api/camps/{campId}/question-groups:
    get:
      summary: 質問グループの一覧を取得
      tags:
        - Questions
      operationId: getQuestionGroups
      parameters:
        - $ref: "#/components/parameters/CampId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/QuestionGroup"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /api/admin/camps/{campId}/question-groups:
    post:
      summary: 質問グループを作成（管理者用）
      tags:
        - Questions
      operationId: adminPostQuestionGroup
      parameters:
        - $ref: "#/components/parameters/X-Forwarded-User"
        - $ref: "#/components/parameters/CampId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QuestionGroup"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QuestionGroup"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /api/question-groups/{questionGroupId}:
    get:
      summary: 質問グループの詳細を取得
      tags:
        - Questions
      operationId: getQuestionGroup
      parameters:
        - $ref: "#/components/parameters/QuestionGroupId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QuestionGroup"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /api/admin/question-groups/{questionGroupId}:
    put:
      summary: 質問グループを更新（管理者用）
      tags:
        - Questions
      operationId: adminPutQuestionGroup
      parameters:
        - $ref: "#/components/parameters/QuestionGroupId"
        - $ref: "#/components/parameters/X-Forwarded-User"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QuestionGroup"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QuestionGroup"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
    delete:
      summary: 質問グループを削除（管理者用）
      tags:
        - Questions
      operationId: adminDeleteQuestionGroup
      parameters:
        - $ref: "#/components/parameters/QuestionGroupId"
        - $ref: "#/components/parameters/X-Forwarded-User"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /api/questions:
    get:
      summary: 質問の一覧を取得
      tags:
        - Questions
      operationId: getQuestions
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Question"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /api/admin/questions:
    post:
      summary: 質問を作成（管理者用）
      tags:
        - Questions
      operationId: adminPostQuestion
      parameters:
        - $ref: "#/components/parameters/X-Forwarded-User"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Question"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Question"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /api/questions/{questionId}:
    get:
      summary: 質問の詳細を取得
      tags:
        - Questions
      operationId: getQuestion
      parameters:
        - $ref: "#/components/parameters/QuestionId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Question"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /api/admin/questions/{questionId}:
    put:
      summary: 質問を更新（管理者用）
      tags:
        - Questions
      operationId: adminPutQuestion
      parameters:
        - $ref: "#/components/parameters/QuestionId"
        - $ref: "#/components/parameters/X-Forwarded-User"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Question"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Question"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
    delete:
      summary: 質問を削除（管理者用）
      tags:
        - Questions
      operationId: adminDeleteQuestion
      parameters:
        - $ref: "#/components/parameters/QuestionId"
        - $ref: "#/components/parameters/X-Forwarded-User"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /api/admin/options:
    post:
      summary: 選択肢を作成（管理者用）
      tags:
        - Questions
      operationId: adminPostOption
      parameters:
        - $ref: "#/components/parameters/X-Forwarded-User"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Option"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Option"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /api/admin/options/{optionId}:
    put:
      summary: 選択肢を更新（管理者用）
      tags:
        - Questions
      operationId: adminPutOption
      parameters:
        - $ref: "#/components/parameters/OptionId"
        - $ref: "#/components/parameters/X-Forwarded-User"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Option"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Option"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
    delete:
      summary: 選択肢を削除（管理者用）
      tags:
        - Questions
      operationId: adminDeleteOption
      parameters:
        - $ref: "#/components/parameters/OptionId"
        - $ref: "#/components/parameters/X-Forwarded-User"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /api/admin/questions/{questionId}/answers:
    get:
      summary: 質問の回答を取得（管理者用）
      tags:
        - Questions
      operationId: adminGetAnswers
      parameters:
        - $ref: "#/components/parameters/QuestionId"
        - $ref: "#/components/parameters/UserIdInQuery"
        - $ref: "#/components/parameters/X-Forwarded-User"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Answer"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /api/questions/{questionId}/answers:
    get:
      summary: 質問の回答一覧を取得
      tags:
        - Questions
      operationId: getAnswers
      parameters:
        - $ref: "#/components/parameters/QuestionId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Answer"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /api/me/question-groups/{questionGroupId}/answers:
    get:
      summary: ある質問グループに対する自分の回答を取得
      tags:
        - Questions
      operationId: getMyAnswers
      parameters:
        - $ref: "#/components/parameters/QuestionGroupId"
        - $ref: "#/components/parameters/X-Forwarded-User"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Answer"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /api/answers:
    post:
      summary: 質問に回答する
      tags:
        - Questions
      operationId: postAnswer
      parameters:
        - $ref: "#/components/parameters/X-Forwarded-User"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Answer"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Answer"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /api/answers/{answerId}:
    put:
      summary: 自分の回答を、または合宿係が他のユーザーの回答を更新
      tags:
        - Questions
      operationId: putAnswer
      parameters:
        - $ref: "#/components/parameters/AnswerId"
        - $ref: "#/components/parameters/X-Forwarded-User"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Answer"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Answer"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /api/admin/camps/{campId}/payments:
    get:
      summary: 支払い情報の一覧を取得（管理者用）
      tags:
        - Payments
      operationId: adminGetPayments
      parameters:
        - $ref: "#/components/parameters/CampId"
        - $ref: "#/components/parameters/X-Forwarded-User"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Payment"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
    post:
      summary: 支払い情報を作成（管理者用）
      tags:
        - Payments
      operationId: adminPostPayment
      parameters:
        - $ref: "#/components/parameters/CampId"
        - $ref: "#/components/parameters/X-Forwarded-User"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Payment"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Payment"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /api/admin/payments/{paymentId}:
    put:
      summary: 支払い情報を更新（管理者用）
      tags:
        - Payments
      operationId: adminPutPayment
      parameters:
        - $ref: "#/components/parameters/PaymentId"
        - $ref: "#/components/parameters/X-Forwarded-User"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Payment"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Payment"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /api/camps/{campId}/room-groups:
    get:
      summary: 部屋グループの一覧を取得
      tags:
        - Rooms
      operationId: getRoomGroups
      parameters:
        - $ref: "#/components/parameters/CampId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RoomGroup"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /api/admin/camps/{campId}/room-groups:
    post:
      summary: 部屋グループを作成（管理者用）
      tags:
        - Rooms
      operationId: adminPostRoomGroup
      parameters:
        - $ref: "#/components/parameters/X-Forwarded-User"
        - $ref: "#/components/parameters/CampId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoomGroup"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoomGroup"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /api/admin/room-groups/{roomGroupId}:
    put:
      summary: 部屋グループを更新（管理者用）
      tags:
        - Rooms
      operationId: adminPutRoomGroup
      parameters:
        - $ref: "#/components/parameters/RoomGroupId"
        - $ref: "#/components/parameters/X-Forwarded-User"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoomGroup"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoomGroup"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
    delete:
      summary: 部屋グループを削除（管理者用）
      tags:
        - Rooms
      operationId: adminDeleteRoomGroup
      parameters:
        - $ref: "#/components/parameters/RoomGroupId"
        - $ref: "#/components/parameters/X-Forwarded-User"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /api/admin/rooms:
    post:
      summary: 部屋を作成（管理者用）
      tags:
        - Rooms
      operationId: adminPostRoom
      parameters:
        - $ref: "#/components/parameters/X-Forwarded-User"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostRoomRequest"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Room"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /api/admin/rooms/{roomId}:
    put:
      summary: 部屋を更新（管理者用）
      tags:
        - Rooms
      operationId: adminPutRoom
      parameters:
        - $ref: "#/components/parameters/RoomId"
        - $ref: "#/components/parameters/X-Forwarded-User"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostRoomRequest"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Room"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
    delete:
      summary: 部屋を削除（管理者用）
      tags:
        - Rooms
      operationId: adminDeleteRoom
      parameters:
        - $ref: "#/components/parameters/RoomId"
        - $ref: "#/components/parameters/X-Forwarded-User"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /api/camps/{campId}/images:
    get:
      summary: 画像の一覧を取得
      tags:
        - Images
      operationId: getImages
      parameters:
        - $ref: "#/components/parameters/CampId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Image"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /api/admin/camps/{campId}/images:
    post:
      summary: 画像をアップロード（管理者用）
      tags:
        - Images
      operationId: adminPostImage
      parameters:
        - $ref: "#/components/parameters/CampId"
        - $ref: "#/components/parameters/X-Forwarded-User"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Image"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /api/images/{imageId}:
    get:
      summary: 画像を取得
      tags:
        - Images
      operationId: getImage
      parameters:
        - $ref: "#/components/parameters/ImageId"
      responses:
        "200":
          description: OK
          content:
            image/*:
              schema:
                type: string
                format: binary
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /api/admin/images/{imageId}:
    put:
      summary: 画像を更新（管理者用）
      tags:
        - Images
      operationId: adminPutImage
      parameters:
        - $ref: "#/components/parameters/ImageId"
        - $ref: "#/components/parameters/X-Forwarded-User"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Image"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
    delete:
      summary: 画像を削除（管理者用）
      tags:
        - Images
      operationId: adminDeleteImage
      parameters:
        - $ref: "#/components/parameters/ImageId"
        - $ref: "#/components/parameters/X-Forwarded-User"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /api/camps/{campId}/roll-calls:
    get:
      summary: 点呼の一覧を取得
      tags:
        - RollCalls
      operationId: getRollCalls
      parameters:
        - $ref: "#/components/parameters/CampId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RollCall"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /api/admin/camps/{campId}/roll-calls:
    post:
      summary: 点呼を作成（管理者用）
      tags:
        - RollCalls
      operationId: adminPostRollCall
      parameters:
        - $ref: "#/components/parameters/X-Forwarded-User"
        - $ref: "#/components/parameters/CampId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RollCallDetail"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RollCallDetail"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /api/roll-calls/{rollCallId}:
    get:
      summary: 点呼の詳細を取得
      tags:
        - RollCalls
      operationId: getRollCall
      parameters:
        - $ref: "#/components/parameters/RollCallId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RollCallDetail"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /api/roll-calls/{rollCallId}/stream:
    get:
      summary: 新たに作成された回答をストリームで取得
      tags:
        - RollCalls
      operationId: streamRollCallAnswer
      parameters:
        - $ref: "#/components/parameters/RollCallId"
        - $ref: "#/components/parameters/X-Forwarded-User"
      responses:
        "200":
          description: OK
          content:
            text/event-stream:
              schema:
                $ref: "#/components/schemas/RollCallAnswer"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /api/roll-calls/{rollCallId}/reactions:
    get:
      summary: 点呼のリアクション一覧を取得
      tags:
        - RollCalls
      operationId: getRollCallReactions
      parameters:
        - $ref: "#/components/parameters/RollCallId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RollCallReaction"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
    post:
      summary: 点呼にリアクションを追加
      tags:
        - RollCalls
      operationId: postRollCallReaction
      parameters:
        - $ref: "#/components/parameters/RollCallId"
        - $ref: "#/components/parameters/X-Forwarded-User"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RollCallReaction"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RollCallReaction"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /api/roll-calls/{rollCallId}/reactions/stream:
    get:
      summary: 新たに作成されたリアクションをストリームで取得
      tags:
        - RollCalls
      operationId: streamRollCallReactions
      parameters:
        - $ref: "#/components/parameters/RollCallId"
      responses:
        "200":
          description: OK
          content:
            text/event-stream:
              schema:
                $ref: "#/components/schemas/RollCallReaction"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /api/reactions/{reactionId}:
    put:
      summary: リアクションを更新
      tags:
        - RollCalls
      operationId: putReaction
      parameters:
        - $ref: "#/components/parameters/ReactionId"
        - $ref: "#/components/parameters/X-Forwarded-User"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RollCallReaction"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RollCallReaction"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
    delete:
      summary: リアクションを削除
      tags:
        - RollCalls
      operationId: deleteReaction
      parameters:
        - $ref: "#/components/parameters/ReactionId"
        - $ref: "#/components/parameters/X-Forwarded-User"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

components:
  parameters:
    X-Forwarded-User:
      name: X-Forwarded-User
      in: header
      description: ログインしているユーザーのtraQ ID（NeoShowcaseが自動で付与）
      schema:
        type: string
    UserId:
      name: userId
      in: path
      description: User ID
      required: true
      schema:
        type: string
    UserIdInQuery:
      name: userId
      in: query
      description: User ID
      schema:
        type: string
    CampId:
      name: campId
      in: path
      description: 合宿ID
      required: true
      schema:
        type: integer
    CampIdInQuery:
      name: campId
      in: query
      description: 合宿ID
      schema:
        type: integer
    EventId:
      name: eventId
      in: path
      description: イベントID
      required: true
      schema:
        type: integer
    QuestionGroupId:
      name: questionGroupId
      in: path
      description: 質問グループのID
      required: true
      schema:
        type: integer
    QuestionId:
      name: questionId
      in: path
      description: 質問ID
      required: true
      schema:
        type: integer
    OptionId:
      name: optionId
      in: path
      description: 選択肢ID
      required: true
      schema:
        type: integer
    AnswerId:
      name: answerId
      in: path
      description: 回答ID
      required: true
      schema:
        type: integer
    RoomGroupId:
      name: roomGroupId
      in: path
      description: 部屋グループID
      required: true
      schema:
        type: integer
    RoomId:
      name: roomId
      in: path
      description: 部屋ID
      required: true
      schema:
        type: integer
    ImageId:
      name: imageId
      in: path
      description: 画像ID
      required: true
      schema:
        type: integer
    RollCallId:
      name: rollCallId
      in: path
      description: 点呼ID
      required: true
      schema:
        type: integer
    ReactionId:
      name: reactionId
      in: path
      description: リアクションID
      required: true
      schema:
        type: integer
  responses:
    NoContent:
      description: No Content
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
    Conflict:
      description: Conflict
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Internal server error
  schemas:
    Camp:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        displayId:
          type: string
        name:
          type: string
        description:
          type: string
        isDraft:
          type: boolean
        isRegistrationOpen:
          type: boolean
        isPaymentOpen:
          type: boolean
      required:
        - id
        - displayId
        - name
        - description
        - isDraft
        - isRegistrationOpen
        - isPaymentOpen
    Event:
      oneOf:
        - $ref: "#/components/schemas/DurationEvent"
        - $ref: "#/components/schemas/OfficialEvent"
        - $ref: "#/components/schemas/MomentEvent"
    DurationEvent:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        type:
          type: string
          enum:
            - duration
        name:
          type: string
        description:
          type: string
        location:
          type: string
        timeStart:
          type: string
          format: date-time
        timeEnd:
          type: string
          format: date-time
        organizerId:
          type: string
        displayColor:
          type: string
          enum:
            - orange
            - green
            - red
            - blue
            - purple
            - pink
      required:
        - id
        - type
        - name
        - description
        - location
        - timeStart
        - timeEnd
        - organizerId
        - displayColor
    OfficialEvent:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        type:
          type: string
          enum:
            - official
        name:
          type: string
        description:
          type: string
        location:
          type: string
        timeStart:
          type: string
          format: date-time
        timeEnd:
          type: string
          format: date-time
      required:
        - id
        - type
        - name
        - description
        - location
        - timeStart
        - timeEnd
    MomentEvent:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        type:
          type: string
          enum:
            - moment
        name:
          type: string
        description:
          type: string
        location:
          type: string
        time:
          type: string
          format: date-time
      required:
        - id
        - type
        - name
        - description
        - location
        - time
    User:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        isStaff:
          type: boolean
          writeOnly: true
      required:
        - id
        - isStaff
    Dashboard:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        payment:
          $ref: "#/components/schemas/Payment"
        room:
          $ref: "#/components/schemas/Room"
      required:
        - id
        - payment
        - room
    Message:
      type: object
      properties:
        content:
          type: string
        sendAt:
          type: string
          format: date-time
      required:
        - content
        - sendAt
    QuestionGroup:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
        description:
          type: string
          nullable: true
        due:
          type: string
          format: date-time
        questions:
          type: array
          readOnly: true
          items:
            $ref: "#/components/schemas/Question"
      required:
        - id
        - name
        - description
        - due
        - questions
    Question:
      oneOf:
        - $ref: "#/components/schemas/FreeTextQuestion"
        - $ref: "#/components/schemas/FreeNumberQuestion"
        - $ref: "#/components/schemas/SingleChoiceQuestion"
        - $ref: "#/components/schemas/MultipleChoiceQuestion"

    FreeTextQuestion:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        questionGroupId:
          type: integer
        title:
          type: string
        description:
          type: string
          nullable: true
        type:
          type: string
          enum:
            - free_text
        isPublic:
          type: boolean
        isOpen:
          type: boolean
      required:
        - id
        - questionGroupId
        - title
        - description
        - type
        - isPublic
        - isOpen

    FreeNumberQuestion:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        questionGroupId:
          type: integer
        title:
          type: string
        description:
          type: string
          nullable: true
        type:
          type: string
          enum:
            - free_number
        isPublic:
          type: boolean
        isOpen:
          type: boolean
      required:
        - id
        - questionGroupId
        - title
        - description
        - type
        - isPublic
        - isOpen

    SingleChoiceQuestion:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        questionGroupId:
          type: integer
        title:
          type: string
        description:
          type: string
          nullable: true
        type:
          type: string
          enum:
            - single
        isPublic:
          type: boolean
        isOpen:
          type: boolean
        options:
          type: array
          readOnly: true
          items:
            $ref: "#/components/schemas/Option"
      required:
        - id
        - questionGroupId
        - title
        - description
        - type
        - isPublic
        - isOpen
        - options

    MultipleChoiceQuestion:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        questionGroupId:
          type: integer
        title:
          type: string
        description:
          type: string
          nullable: true
        type:
          type: string
          enum:
            - multiple
        isPublic:
          type: boolean
        isOpen:
          type: boolean
        options:
          type: array
          readOnly: true
          items:
            $ref: "#/components/schemas/Option"
      required:
        - id
        - questionGroupId
        - title
        - description
        - type
        - isPublic
        - isOpen
        - options
    Option:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        questionId:
          type: integer
        content:
          type: string
      required:
        - id
        - questionId
        - content
    Answer:
      oneOf:
        - $ref: "#/components/schemas/FreeTextAnswer"
        - $ref: "#/components/schemas/FreeNumberAnswer"
        - $ref: "#/components/schemas/SingleChoiceAnswer"
        - $ref: "#/components/schemas/MultipleChoiceAnswer"

    FreeTextAnswer:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        questionId:
          type: integer
          writeOnly: true
        userId:
          type: string
          readOnly: true
        content:
          type: string
      required:
        - id
        - questionId
        - userId
        - content

    FreeNumberAnswer:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        questionId:
          type: integer
          writeOnly: true
        userId:
          type: string
          readOnly: true
        content:
          type: number
      required:
        - id
        - questionId
        - userId
        - content

    SingleChoiceAnswer:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        questionId:
          type: integer
          writeOnly: true
        userId:
          type: string
          readOnly: true
        content:
          $ref: "#/components/schemas/Option"
      required:
        - id
        - questionId
        - userId
        - content

    MultipleChoiceAnswer:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        questionId:
          type: integer
          writeOnly: true
        userId:
          type: string
          readOnly: true
        content:
          type: array
          items:
            $ref: "#/components/schemas/Option"
      required:
        - id
        - questionId
        - userId
        - content
    Payment:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        userId:
          type: string
          readOnly: true
        campId:
          type: integer
        amount:
          type: integer
        amountPaid:
          type: integer
      required:
        - id
        - userId
        - campId
        - amountPaid
    RoomGroup:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
        rooms:
          type: array
          readOnly: true
          items:
            $ref: "#/components/schemas/Room"
      required:
        - id
        - name
        - rooms
    Room:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        members:
          type: array
          items:
            $ref: "#/components/schemas/User"
      required:
        - id
        - name
        - members
    PostRoomRequest:
      type: object
      properties:
        name:
          type: string
        roomGroupId:
          type: integer
        memberIds:
          type: array
          items:
            type: string
      required:
        - name
        - roomGroupId
        - memberIds
    Image:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
      required:
        - id
    RollCall:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
        description:
          type: string
      required:
        - id
        - name
        - description
    RollCallDetail:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
        description:
          type: string
        options:
          type: array
          items:
            type: string
        subjects:
          type: array
          writeOnly: true
          items:
            type: string
        unansweredSubjects:
          type: array
          readOnly: true
          items:
            type: string
        reactions:
          type: array
          readOnly: true
          items:
            $ref: "#/components/schemas/RollCallReaction"
      required:
        - id
        - name
        - description
        - options
        - subjects
        - unansweredSubjects
        - reactions

    RollCallReaction:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        userId:
          type: string
          readOnly: true
        content:
          type: string
      required:
        - id
        - userId
        - content

tags:
  - name: Camps
    description: 合宿に関する操作
  - name: Events
    description: イベントに関する操作
  - name: Users
    description: ユーザーに関する操作
  - name: Questions
    description: 質問に関する操作
  - name: Payments
    description: 支払いに関する操作（admin向け）
  - name: Rooms
    description: 部屋に関する操作
  - name: Images
    description: 画像に関する操作
  - name: RollCalls
    description: 点呼に関する操作
