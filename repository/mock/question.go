// Code generated by MockGen. DO NOT EDIT.
// Source: question.go
//
// Generated by this command:
//
//	mockgen -source=question.go -destination=mock/question.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	model "github.com/traP-jp/rucQ/backend/model"
	gomock "go.uber.org/mock/gomock"
)

// MockQuestionRepository is a mock of QuestionRepository interface.
type MockQuestionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockQuestionRepositoryMockRecorder
	isgomock struct{}
}

// MockQuestionRepositoryMockRecorder is the mock recorder for MockQuestionRepository.
type MockQuestionRepositoryMockRecorder struct {
	mock *MockQuestionRepository
}

// NewMockQuestionRepository creates a new mock instance.
func NewMockQuestionRepository(ctrl *gomock.Controller) *MockQuestionRepository {
	mock := &MockQuestionRepository{ctrl: ctrl}
	mock.recorder = &MockQuestionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuestionRepository) EXPECT() *MockQuestionRepositoryMockRecorder {
	return m.recorder
}

// CreateQuestion mocks base method.
func (m *MockQuestionRepository) CreateQuestion(question *model.Question) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQuestion", question)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateQuestion indicates an expected call of CreateQuestion.
func (mr *MockQuestionRepositoryMockRecorder) CreateQuestion(question any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQuestion", reflect.TypeOf((*MockQuestionRepository)(nil).CreateQuestion), question)
}

// DeleteQuestionByID mocks base method.
func (m *MockQuestionRepository) DeleteQuestionByID(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteQuestionByID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteQuestionByID indicates an expected call of DeleteQuestionByID.
func (mr *MockQuestionRepositoryMockRecorder) DeleteQuestionByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQuestionByID", reflect.TypeOf((*MockQuestionRepository)(nil).DeleteQuestionByID), id)
}

// GetQuestionByID mocks base method.
func (m *MockQuestionRepository) GetQuestionByID(id uint) (*model.Question, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuestionByID", id)
	ret0, _ := ret[0].(*model.Question)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuestionByID indicates an expected call of GetQuestionByID.
func (mr *MockQuestionRepositoryMockRecorder) GetQuestionByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuestionByID", reflect.TypeOf((*MockQuestionRepository)(nil).GetQuestionByID), id)
}

// GetQuestions mocks base method.
func (m *MockQuestionRepository) GetQuestions() ([]model.Question, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuestions")
	ret0, _ := ret[0].([]model.Question)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuestions indicates an expected call of GetQuestions.
func (mr *MockQuestionRepositoryMockRecorder) GetQuestions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuestions", reflect.TypeOf((*MockQuestionRepository)(nil).GetQuestions))
}

// UpdateQuestion mocks base method.
func (m *MockQuestionRepository) UpdateQuestion(questionID uint, question *model.Question) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQuestion", questionID, question)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateQuestion indicates an expected call of UpdateQuestion.
func (mr *MockQuestionRepositoryMockRecorder) UpdateQuestion(questionID, question any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQuestion", reflect.TypeOf((*MockQuestionRepository)(nil).UpdateQuestion), questionID, question)
}
