// Code generated by MockGen. DO NOT EDIT.
// Source: option.go
//
// Generated by this command:
//
//	mockgen -source=option.go -destination=mock/option.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	model "github.com/traP-jp/rucQ/backend/model"
	repository "github.com/traP-jp/rucQ/backend/repository"
	gomock "go.uber.org/mock/gomock"
)

// MockOptionRepository is a mock of OptionRepository interface.
type MockOptionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOptionRepositoryMockRecorder
	isgomock struct{}
}

// MockOptionRepositoryMockRecorder is the mock recorder for MockOptionRepository.
type MockOptionRepositoryMockRecorder struct {
	mock *MockOptionRepository
}

// NewMockOptionRepository creates a new mock instance.
func NewMockOptionRepository(ctrl *gomock.Controller) *MockOptionRepository {
	mock := &MockOptionRepository{ctrl: ctrl}
	mock.recorder = &MockOptionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOptionRepository) EXPECT() *MockOptionRepositoryMockRecorder {
	return m.recorder
}

// CreateOption mocks base method.
func (m *MockOptionRepository) CreateOption(option *model.Option) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOption", option)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOption indicates an expected call of CreateOption.
func (mr *MockOptionRepositoryMockRecorder) CreateOption(option any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOption", reflect.TypeOf((*MockOptionRepository)(nil).CreateOption), option)
}

// GetOptions mocks base method.
func (m *MockOptionRepository) GetOptions(query *repository.GetOptionsQuery) ([]model.Option, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOptions", query)
	ret0, _ := ret[0].([]model.Option)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOptions indicates an expected call of GetOptions.
func (mr *MockOptionRepositoryMockRecorder) GetOptions(query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOptions", reflect.TypeOf((*MockOptionRepository)(nil).GetOptions), query)
}
