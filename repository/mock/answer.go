// Code generated by MockGen. DO NOT EDIT.
// Source: answer.go
//
// Generated by this command:
//
//	mockgen -source=answer.go -destination=mock/answer.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	model "github.com/traP-jp/rucQ/backend/model"
	gomock "go.uber.org/mock/gomock"
)

// MockAnswerRepository is a mock of AnswerRepository interface.
type MockAnswerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAnswerRepositoryMockRecorder
	isgomock struct{}
}

// MockAnswerRepositoryMockRecorder is the mock recorder for MockAnswerRepository.
type MockAnswerRepositoryMockRecorder struct {
	mock *MockAnswerRepository
}

// NewMockAnswerRepository creates a new mock instance.
func NewMockAnswerRepository(ctrl *gomock.Controller) *MockAnswerRepository {
	mock := &MockAnswerRepository{ctrl: ctrl}
	mock.recorder = &MockAnswerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnswerRepository) EXPECT() *MockAnswerRepositoryMockRecorder {
	return m.recorder
}

// CreateAnswer mocks base method.
func (m *MockAnswerRepository) CreateAnswer(answer *model.Answer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnswer", answer)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAnswer indicates an expected call of CreateAnswer.
func (mr *MockAnswerRepositoryMockRecorder) CreateAnswer(answer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnswer", reflect.TypeOf((*MockAnswerRepository)(nil).CreateAnswer), answer)
}

// GetAnswerByID mocks base method.
func (m *MockAnswerRepository) GetAnswerByID(id uint) (*model.Answer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnswerByID", id)
	ret0, _ := ret[0].(*model.Answer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnswerByID indicates an expected call of GetAnswerByID.
func (mr *MockAnswerRepositoryMockRecorder) GetAnswerByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnswerByID", reflect.TypeOf((*MockAnswerRepository)(nil).GetAnswerByID), id)
}

// UpdateAnswer mocks base method.
func (m *MockAnswerRepository) UpdateAnswer(answer *model.Answer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAnswer", answer)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAnswer indicates an expected call of UpdateAnswer.
func (mr *MockAnswerRepositoryMockRecorder) UpdateAnswer(answer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnswer", reflect.TypeOf((*MockAnswerRepository)(nil).UpdateAnswer), answer)
}
