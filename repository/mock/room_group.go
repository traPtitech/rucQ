// Code generated by MockGen. DO NOT EDIT.
// Source: room_group.go
//
// Generated by this command:
//
//	mockgen -source=room_group.go -destination=mock/room_group.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "github.com/traPtitech/rucQ/model"
	gomock "go.uber.org/mock/gomock"
)

// MockRoomGroupRepository is a mock of RoomGroupRepository interface.
type MockRoomGroupRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRoomGroupRepositoryMockRecorder
	isgomock struct{}
}

// MockRoomGroupRepositoryMockRecorder is the mock recorder for MockRoomGroupRepository.
type MockRoomGroupRepositoryMockRecorder struct {
	mock *MockRoomGroupRepository
}

// NewMockRoomGroupRepository creates a new mock instance.
func NewMockRoomGroupRepository(ctrl *gomock.Controller) *MockRoomGroupRepository {
	mock := &MockRoomGroupRepository{ctrl: ctrl}
	mock.recorder = &MockRoomGroupRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoomGroupRepository) EXPECT() *MockRoomGroupRepositoryMockRecorder {
	return m.recorder
}

// CreateRoomGroup mocks base method.
func (m *MockRoomGroupRepository) CreateRoomGroup(ctx context.Context, roomGroup *model.RoomGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoomGroup", ctx, roomGroup)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRoomGroup indicates an expected call of CreateRoomGroup.
func (mr *MockRoomGroupRepositoryMockRecorder) CreateRoomGroup(ctx, roomGroup any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoomGroup", reflect.TypeOf((*MockRoomGroupRepository)(nil).CreateRoomGroup), ctx, roomGroup)
}
