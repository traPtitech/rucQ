// Code generated by MockGen. DO NOT EDIT.
// Source: room_group.go
//
// Generated by this command:
//
//	mockgen -source=room_group.go -destination=mockrepository/room_group.go -package=mockrepository
//

// Package mockrepository is a generated GoMock package.
package mockrepository

import (
	context "context"
	reflect "reflect"

	model "github.com/traPtitech/rucQ/model"
	gomock "go.uber.org/mock/gomock"
)

// MockRoomGroupRepository is a mock of RoomGroupRepository interface.
type MockRoomGroupRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRoomGroupRepositoryMockRecorder
	isgomock struct{}
}

// MockRoomGroupRepositoryMockRecorder is the mock recorder for MockRoomGroupRepository.
type MockRoomGroupRepositoryMockRecorder struct {
	mock *MockRoomGroupRepository
}

// NewMockRoomGroupRepository creates a new mock instance.
func NewMockRoomGroupRepository(ctrl *gomock.Controller) *MockRoomGroupRepository {
	mock := &MockRoomGroupRepository{ctrl: ctrl}
	mock.recorder = &MockRoomGroupRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoomGroupRepository) EXPECT() *MockRoomGroupRepositoryMockRecorder {
	return m.recorder
}

// CreateRoomGroup mocks base method.
func (m *MockRoomGroupRepository) CreateRoomGroup(ctx context.Context, roomGroup *model.RoomGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoomGroup", ctx, roomGroup)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRoomGroup indicates an expected call of CreateRoomGroup.
func (mr *MockRoomGroupRepositoryMockRecorder) CreateRoomGroup(ctx, roomGroup any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoomGroup", reflect.TypeOf((*MockRoomGroupRepository)(nil).CreateRoomGroup), ctx, roomGroup)
}

// DeleteRoomGroup mocks base method.
func (m *MockRoomGroupRepository) DeleteRoomGroup(ctx context.Context, roomGroupID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoomGroup", ctx, roomGroupID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRoomGroup indicates an expected call of DeleteRoomGroup.
func (mr *MockRoomGroupRepositoryMockRecorder) DeleteRoomGroup(ctx, roomGroupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoomGroup", reflect.TypeOf((*MockRoomGroupRepository)(nil).DeleteRoomGroup), ctx, roomGroupID)
}

// GetRoomGroupByID mocks base method.
func (m *MockRoomGroupRepository) GetRoomGroupByID(ctx context.Context, roomGroupID uint) (*model.RoomGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoomGroupByID", ctx, roomGroupID)
	ret0, _ := ret[0].(*model.RoomGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoomGroupByID indicates an expected call of GetRoomGroupByID.
func (mr *MockRoomGroupRepositoryMockRecorder) GetRoomGroupByID(ctx, roomGroupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoomGroupByID", reflect.TypeOf((*MockRoomGroupRepository)(nil).GetRoomGroupByID), ctx, roomGroupID)
}

// GetRoomGroups mocks base method.
func (m *MockRoomGroupRepository) GetRoomGroups(ctx context.Context, campID uint) ([]model.RoomGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoomGroups", ctx, campID)
	ret0, _ := ret[0].([]model.RoomGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoomGroups indicates an expected call of GetRoomGroups.
func (mr *MockRoomGroupRepositoryMockRecorder) GetRoomGroups(ctx, campID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoomGroups", reflect.TypeOf((*MockRoomGroupRepository)(nil).GetRoomGroups), ctx, campID)
}

// UpdateRoomGroup mocks base method.
func (m *MockRoomGroupRepository) UpdateRoomGroup(ctx context.Context, roomGroupID uint, roomGroup *model.RoomGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoomGroup", ctx, roomGroupID, roomGroup)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRoomGroup indicates an expected call of UpdateRoomGroup.
func (mr *MockRoomGroupRepositoryMockRecorder) UpdateRoomGroup(ctx, roomGroupID, roomGroup any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoomGroup", reflect.TypeOf((*MockRoomGroupRepository)(nil).UpdateRoomGroup), ctx, roomGroupID, roomGroup)
}
