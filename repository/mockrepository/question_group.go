// Code generated by MockGen. DO NOT EDIT.
// Source: question_group.go
//
// Generated by this command:
//
//	mockgen -source=question_group.go -destination=mockrepository/question_group.go -package=mockrepository
//

// Package mockrepository is a generated GoMock package.
package mockrepository

import (
	context "context"
	reflect "reflect"

	model "github.com/traPtitech/rucQ/model"
	gomock "go.uber.org/mock/gomock"
)

// MockQuestionGroupRepository is a mock of QuestionGroupRepository interface.
type MockQuestionGroupRepository struct {
	ctrl     *gomock.Controller
	recorder *MockQuestionGroupRepositoryMockRecorder
	isgomock struct{}
}

// MockQuestionGroupRepositoryMockRecorder is the mock recorder for MockQuestionGroupRepository.
type MockQuestionGroupRepositoryMockRecorder struct {
	mock *MockQuestionGroupRepository
}

// NewMockQuestionGroupRepository creates a new mock instance.
func NewMockQuestionGroupRepository(ctrl *gomock.Controller) *MockQuestionGroupRepository {
	mock := &MockQuestionGroupRepository{ctrl: ctrl}
	mock.recorder = &MockQuestionGroupRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuestionGroupRepository) EXPECT() *MockQuestionGroupRepositoryMockRecorder {
	return m.recorder
}

// CreateQuestionGroup mocks base method.
func (m *MockQuestionGroupRepository) CreateQuestionGroup(questionGroup *model.QuestionGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQuestionGroup", questionGroup)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateQuestionGroup indicates an expected call of CreateQuestionGroup.
func (mr *MockQuestionGroupRepositoryMockRecorder) CreateQuestionGroup(questionGroup any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQuestionGroup", reflect.TypeOf((*MockQuestionGroupRepository)(nil).CreateQuestionGroup), questionGroup)
}

// DeleteQuestionGroup mocks base method.
func (m *MockQuestionGroupRepository) DeleteQuestionGroup(ID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteQuestionGroup", ID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteQuestionGroup indicates an expected call of DeleteQuestionGroup.
func (mr *MockQuestionGroupRepositoryMockRecorder) DeleteQuestionGroup(ID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQuestionGroup", reflect.TypeOf((*MockQuestionGroupRepository)(nil).DeleteQuestionGroup), ID)
}

// GetQuestionGroup mocks base method.
func (m *MockQuestionGroupRepository) GetQuestionGroup(ID uint) (*model.QuestionGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuestionGroup", ID)
	ret0, _ := ret[0].(*model.QuestionGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuestionGroup indicates an expected call of GetQuestionGroup.
func (mr *MockQuestionGroupRepositoryMockRecorder) GetQuestionGroup(ID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuestionGroup", reflect.TypeOf((*MockQuestionGroupRepository)(nil).GetQuestionGroup), ID)
}

// GetQuestionGroups mocks base method.
func (m *MockQuestionGroupRepository) GetQuestionGroups(ctx context.Context, campID uint) ([]model.QuestionGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuestionGroups", ctx, campID)
	ret0, _ := ret[0].([]model.QuestionGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuestionGroups indicates an expected call of GetQuestionGroups.
func (mr *MockQuestionGroupRepositoryMockRecorder) GetQuestionGroups(ctx, campID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuestionGroups", reflect.TypeOf((*MockQuestionGroupRepository)(nil).GetQuestionGroups), ctx, campID)
}

// UpdateQuestionGroup mocks base method.
func (m *MockQuestionGroupRepository) UpdateQuestionGroup(ctx context.Context, questionGroupID uint, questionGroup model.QuestionGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQuestionGroup", ctx, questionGroupID, questionGroup)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateQuestionGroup indicates an expected call of UpdateQuestionGroup.
func (mr *MockQuestionGroupRepositoryMockRecorder) UpdateQuestionGroup(ctx, questionGroupID, questionGroup any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQuestionGroup", reflect.TypeOf((*MockQuestionGroupRepository)(nil).UpdateQuestionGroup), ctx, questionGroupID, questionGroup)
}
