// Code generated by MockGen. DO NOT EDIT.
// Source: room.go
//
// Generated by this command:
//
//	mockgen -source=room.go -destination=mockrepository/room.go -package=mockrepository
//

// Package mockrepository is a generated GoMock package.
package mockrepository

import (
	context "context"
	reflect "reflect"

	model "github.com/traPtitech/rucQ/model"
	gomock "go.uber.org/mock/gomock"
)

// MockRoomRepository is a mock of RoomRepository interface.
type MockRoomRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRoomRepositoryMockRecorder
	isgomock struct{}
}

// MockRoomRepositoryMockRecorder is the mock recorder for MockRoomRepository.
type MockRoomRepositoryMockRecorder struct {
	mock *MockRoomRepository
}

// NewMockRoomRepository creates a new mock instance.
func NewMockRoomRepository(ctrl *gomock.Controller) *MockRoomRepository {
	mock := &MockRoomRepository{ctrl: ctrl}
	mock.recorder = &MockRoomRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoomRepository) EXPECT() *MockRoomRepositoryMockRecorder {
	return m.recorder
}

// CreateRoom mocks base method.
func (m *MockRoomRepository) CreateRoom(ctx context.Context, room *model.Room) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoom", ctx, room)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRoom indicates an expected call of CreateRoom.
func (mr *MockRoomRepositoryMockRecorder) CreateRoom(ctx, room any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoom", reflect.TypeOf((*MockRoomRepository)(nil).CreateRoom), ctx, room)
}

// GetRoomByID mocks base method.
func (m *MockRoomRepository) GetRoomByID(id uint) (*model.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoomByID", id)
	ret0, _ := ret[0].(*model.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoomByID indicates an expected call of GetRoomByID.
func (mr *MockRoomRepositoryMockRecorder) GetRoomByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoomByID", reflect.TypeOf((*MockRoomRepository)(nil).GetRoomByID), id)
}

// GetRoomByUserID mocks base method.
func (m *MockRoomRepository) GetRoomByUserID(ctx context.Context, userID string) (*model.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoomByUserID", ctx, userID)
	ret0, _ := ret[0].(*model.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoomByUserID indicates an expected call of GetRoomByUserID.
func (mr *MockRoomRepositoryMockRecorder) GetRoomByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoomByUserID", reflect.TypeOf((*MockRoomRepository)(nil).GetRoomByUserID), ctx, userID)
}

// GetRooms mocks base method.
func (m *MockRoomRepository) GetRooms() ([]model.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRooms")
	ret0, _ := ret[0].([]model.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRooms indicates an expected call of GetRooms.
func (mr *MockRoomRepositoryMockRecorder) GetRooms() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRooms", reflect.TypeOf((*MockRoomRepository)(nil).GetRooms))
}

// UpdateRoom mocks base method.
func (m *MockRoomRepository) UpdateRoom(ctx context.Context, roomID uint, room *model.Room) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoom", ctx, roomID, room)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRoom indicates an expected call of UpdateRoom.
func (mr *MockRoomRepositoryMockRecorder) UpdateRoom(ctx, roomID, room any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoom", reflect.TypeOf((*MockRoomRepository)(nil).UpdateRoom), ctx, roomID, room)
}
