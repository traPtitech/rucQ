// Code generated by MockGen. DO NOT EDIT.
// Source: roll_call_reaction.go
//
// Generated by this command:
//
//	mockgen -source=roll_call_reaction.go -destination=mockrepository/roll_call_reaction.go -package=mockrepository
//

// Package mockrepository is a generated GoMock package.
package mockrepository

import (
	context "context"
	reflect "reflect"

	model "github.com/traPtitech/rucQ/model"
	gomock "go.uber.org/mock/gomock"
)

// MockRollCallReactionRepository is a mock of RollCallReactionRepository interface.
type MockRollCallReactionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRollCallReactionRepositoryMockRecorder
	isgomock struct{}
}

// MockRollCallReactionRepositoryMockRecorder is the mock recorder for MockRollCallReactionRepository.
type MockRollCallReactionRepositoryMockRecorder struct {
	mock *MockRollCallReactionRepository
}

// NewMockRollCallReactionRepository creates a new mock instance.
func NewMockRollCallReactionRepository(ctrl *gomock.Controller) *MockRollCallReactionRepository {
	mock := &MockRollCallReactionRepository{ctrl: ctrl}
	mock.recorder = &MockRollCallReactionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRollCallReactionRepository) EXPECT() *MockRollCallReactionRepositoryMockRecorder {
	return m.recorder
}

// CreateRollCallReaction mocks base method.
func (m *MockRollCallReactionRepository) CreateRollCallReaction(ctx context.Context, reaction *model.RollCallReaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRollCallReaction", ctx, reaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRollCallReaction indicates an expected call of CreateRollCallReaction.
func (mr *MockRollCallReactionRepositoryMockRecorder) CreateRollCallReaction(ctx, reaction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRollCallReaction", reflect.TypeOf((*MockRollCallReactionRepository)(nil).CreateRollCallReaction), ctx, reaction)
}

// DeleteRollCallReaction mocks base method.
func (m *MockRollCallReactionRepository) DeleteRollCallReaction(ctx context.Context, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRollCallReaction", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRollCallReaction indicates an expected call of DeleteRollCallReaction.
func (mr *MockRollCallReactionRepositoryMockRecorder) DeleteRollCallReaction(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRollCallReaction", reflect.TypeOf((*MockRollCallReactionRepository)(nil).DeleteRollCallReaction), ctx, id)
}

// GetRollCallReactionByID mocks base method.
func (m *MockRollCallReactionRepository) GetRollCallReactionByID(ctx context.Context, id uint) (*model.RollCallReaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRollCallReactionByID", ctx, id)
	ret0, _ := ret[0].(*model.RollCallReaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRollCallReactionByID indicates an expected call of GetRollCallReactionByID.
func (mr *MockRollCallReactionRepositoryMockRecorder) GetRollCallReactionByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRollCallReactionByID", reflect.TypeOf((*MockRollCallReactionRepository)(nil).GetRollCallReactionByID), ctx, id)
}

// GetRollCallReactions mocks base method.
func (m *MockRollCallReactionRepository) GetRollCallReactions(ctx context.Context, rollCallID uint) ([]model.RollCallReaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRollCallReactions", ctx, rollCallID)
	ret0, _ := ret[0].([]model.RollCallReaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRollCallReactions indicates an expected call of GetRollCallReactions.
func (mr *MockRollCallReactionRepositoryMockRecorder) GetRollCallReactions(ctx, rollCallID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRollCallReactions", reflect.TypeOf((*MockRollCallReactionRepository)(nil).GetRollCallReactions), ctx, rollCallID)
}

// UpdateRollCallReaction mocks base method.
func (m *MockRollCallReactionRepository) UpdateRollCallReaction(ctx context.Context, id uint, reaction *model.RollCallReaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRollCallReaction", ctx, id, reaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRollCallReaction indicates an expected call of UpdateRollCallReaction.
func (mr *MockRollCallReactionRepositoryMockRecorder) UpdateRollCallReaction(ctx, id, reaction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRollCallReaction", reflect.TypeOf((*MockRollCallReactionRepository)(nil).UpdateRollCallReaction), ctx, id, reaction)
}
